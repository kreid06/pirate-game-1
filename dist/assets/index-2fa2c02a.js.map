{"version":3,"file":"index-2fa2c02a.js","sources":["../../node_modules/matter-js/build/matter.js","../../src/game/Player.ts","../../src/game/modules/BaseModule.ts","../../src/game/modules/CannonModule.ts","../../src/game/modules/SailModule.ts","../../src/game/modules/WheelModule.ts","../../src/game/Ship.ts","../../src/game/Enemy.ts","../../src/game/World.ts","../../src/game/Cannonball.ts","../../src/game/Game.ts","../../src/index.ts"],"sourcesContent":["/*!\n * matter-js 0.17.1 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Matter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Matter\"] = factory();\n\telse\n\t\troot[\"Matter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 22);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof global !== 'undefined') {\n                decomp = global.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Render = __webpack_require__(16);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(10);\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = __webpack_require__(4);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(10);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n        };\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(17);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = __webpack_require__(14);\nvar Pair = __webpack_require__(9);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(5);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(4);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(12);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase)\n            Render.grid(render, engine.grid, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                grid.bucketWidth,\n                grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(19);\nvar Detector = __webpack_require__(13);\nvar Pairs = __webpack_require__(20);\nvar Grid = __webpack_require__(21);\nvar Events = __webpack_require__(4);\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            grid: null,\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.grid = Grid.create(options.grid || options.broadphase);\n        engine.pairs = Pairs.create();\n\n        // temporary back compatibility\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        var startTime = Common.now();\n\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            grid = engine.grid,\n            gridPairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n        timing.lastDelta = delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n\n        // if world is dirty, we must flush the whole grid\n        if (world.isModified)\n            Grid.clear(grid);\n\n        // update the grid buckets based on current bodies\n        Grid.update(grid, allBodies, engine, world.isModified);\n        gridPairs = grid.pairsList;\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = Detector.collisions(gridPairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world,\n            bodies = Composite.allBodies(world);\n\n        Pairs.clear(engine.pairs);\n        Grid.clear(engine.grid);\n        Grid.update(engine.grid, bodies, engine, true);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     *\n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     *\n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated use `engine.grid`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * The gravity to apply on all bodies in `engine.world`.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                Vector.add(bodyA.positionImpulse, \n                    Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pairsList[i].confirmedActive = false;\n        }\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                    pair.confirmedActive = true;\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && !pair.confirmedActive) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(23);\r\n\r\nMatter.Axes = __webpack_require__(10);\r\nMatter.Bodies = __webpack_require__(11);\r\nMatter.Body = __webpack_require__(6);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(5);\r\nMatter.Composites = __webpack_require__(24);\r\nMatter.Constraint = __webpack_require__(8);\r\nMatter.Contact = __webpack_require__(17);\r\nMatter.Detector = __webpack_require__(13);\r\nMatter.Engine = __webpack_require__(18);\r\nMatter.Events = __webpack_require__(4);\r\nMatter.Grid = __webpack_require__(21);\r\nMatter.Mouse = __webpack_require__(12);\r\nMatter.MouseConstraint = __webpack_require__(25);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(20);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(26);\r\nMatter.Render = __webpack_require__(16);\r\nMatter.Resolver = __webpack_require__(19);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(14);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(28);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(29);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =  true ? \"0.17.1\" : undefined;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bodies = __webpack_require__(11);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(12);\nvar Events = __webpack_require__(4);\nvar Detector = __webpack_require__(13);\nvar Constraint = __webpack_require__(8);\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar SAT = __webpack_require__(14);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(11);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(4);\nvar Engine = __webpack_require__(18);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        Events.trigger(runner, 'afterTick', event);\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});","import Matter from 'matter-js';\n\nexport default class Player {\n    position: { x: number; y: number };\n    health: number;\n    body: Matter.Body;\n    onShip: boolean;\n    atShipWheel: boolean;\n\n    constructor(x: number, y: number) {\n        this.position = { x, y };\n        this.health = 100; // Default health\n        this.body = Matter.Bodies.circle(x, y, 15, {\n            label: 'player',\n            density: 0.002,\n            frictionAir: 0.1\n        });\n        this.onShip = false;\n        this.atShipWheel = false;\n    }\n\n    move(dx: number, dy: number) {\n        this.position.x += dx;\n        this.position.y += dy;\n    }\n\n    takeDamage(amount: number) {\n        this.health -= amount;\n        if (this.health < 0) {\n            this.health = 0; // Prevent negative health\n        }\n    }\n\n    isAlive(): boolean {\n        return this.health > 0;\n    }\n\n    // Set player on ship status and update physics properties\n    setOnShip(status: boolean, atWheel: boolean = false): void {\n        this.onShip = status;\n        this.atShipWheel = atWheel;\n        \n        // When player is on ship, make body a sensor to avoid collisions\n        // but only when at wheel - we want physics when walking on deck\n        Matter.Body.set(this.body, 'isSensor', status && atWheel);\n    }\n    \n    // Toggle player between steering wheel and walking on deck\n    setAtShipWheel(atWheel: boolean): void {\n        if (this.onShip) {\n            this.atShipWheel = atWheel;\n            // Update physics - sensor when at wheel, solid when walking\n            Matter.Body.set(this.body, 'isSensor', atWheel);\n        }\n    }\n}","// BaseModule.ts - Base class for all ship modules\r\nimport Matter from 'matter-js';\r\n\r\n// Define module types\r\nexport type ModuleType = 'cannon' | 'sail' | 'wheel' | 'plank';\r\n\r\n// Base module class that all ship modules will extend\r\nexport class BaseModule {\r\n    type: ModuleType;\r\n    position: { x: number; y: number };\r\n    rotation: number;\r\n    health: number;\r\n    body?: Matter.Body;\r\n\r\n    constructor(type: ModuleType, position: { x: number; y: number }, rotation: number = 0) {\r\n        this.type = type;\r\n        this.position = { ...position };\r\n        this.rotation = rotation;\r\n        this.health = 100; // Default health\r\n    }\r\n\r\n    // Update method to be overridden by child classes\r\n    update(): void {\r\n        // Base update logic\r\n    }\r\n\r\n    // Use method to be overridden by child classes\r\n    use(): void {\r\n        // Base use logic\r\n    }\r\n\r\n    // Take damage\r\n    takeDamage(amount: number): void {\r\n        this.health -= amount;\r\n        if (this.health <= 0) {\r\n            this.health = 0;\r\n            this.onDestroy();\r\n        }\r\n    }\r\n\r\n    // Method called when the module is destroyed\r\n    onDestroy(): void {\r\n        // Base destroy logic\r\n    }\r\n}","// CannonModule.ts - Specialized class for ship cannons\r\nimport { BaseModule } from './BaseModule';\r\n\r\nexport class CannonModule extends BaseModule {\r\n    turretAngle: number = 0;\r\n    reloadTime: number = 2000; // Reload time in milliseconds\r\n    lastFiredTime: number = 0;\r\n    isLoaded: boolean = true;\r\n    private game: any | null = null; // Reference to the game for creating cannonballs\r\n\r\n    constructor(position: { x: number; y: number }, rotation: number = 0) {\r\n        super('cannon', position, rotation);\r\n    }\r\n\r\n    // Set game reference for creating cannonballs\r\n    setGame(game: any): void {\r\n        this.game = game;\r\n    }\r\n\r\n    // Update cannon state\r\n    override update(): void {\r\n        // Check if cannon should reload\r\n        if (!this.isLoaded && Date.now() - this.lastFiredTime > this.reloadTime) {\r\n            this.isLoaded = true;\r\n        }\r\n    }\r\n\r\n    // Use the cannon (fire it)\r\n    override use(): void {\r\n        if (this.isLoaded) {\r\n            this.isLoaded = false;\r\n            this.lastFiredTime = Date.now();\r\n            \r\n            // Create cannonball if game reference exists and we have target coordinates\r\n            if (this.game && this.game.createCannonball) {\r\n                // Actual firing logic is handled by the Ship class\r\n                // as it has access to proper world coordinates and physics\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Fire the cannon at a specific target position\r\n    fire(worldX: number, worldY: number, shipAngle: number): { x: number; y: number; angle: number } {\r\n        // Return position and angle information for where to spawn the cannonball\r\n        const isTopCannon = this.position.y < 0;\r\n        const baseRotation = isTopCannon ? Math.PI : 0;\r\n        const firingAngle = shipAngle + baseRotation + this.turretAngle;\r\n        \r\n        // Set the cannon as fired\r\n        this.isLoaded = false;\r\n        this.lastFiredTime = Date.now();\r\n        \r\n        // Calculate spawn position using barrel length\r\n        const barrelLength = 40;\r\n        // Use barrel length to calculate offset for the cannonball spawn position\r\n        const spawnX = worldX + Math.cos(firingAngle) * barrelLength;\r\n        const spawnY = worldY + Math.sin(firingAngle) * barrelLength;\r\n        \r\n        return {\r\n            x: spawnX,\r\n            y: spawnY,\r\n            angle: firingAngle\r\n        };\r\n    }\r\n}","// SailModule.ts - Specialized class for ship sails\r\nimport { BaseModule } from './BaseModule';\r\n\r\nexport class SailModule extends BaseModule {\r\n    openness: number = 0; // How open the sail is (0-100%)\r\n    angle: number = 0;    // Angle of the sail relative to the mast (-75 to +75 degrees)\r\n    \r\n    constructor(position: { x: number; y: number }) {\r\n        super('sail', position, 0); // Sails don't have a rotation property in the same way as cannons\r\n    }\r\n    \r\n    // Set the sail openness\r\n    setOpenness(percent: number): void {\r\n        // Ensure the value is between 0 and 100\r\n        this.openness = Math.max(0, Math.min(100, percent));\r\n    }\r\n    \r\n    // Gradually open the sail by an increment\r\n    open(increment: number = 10): void {\r\n        this.setOpenness(this.openness + increment);\r\n    }\r\n    \r\n    // Gradually close the sail by an increment\r\n    close(increment: number = 10): void {\r\n        this.setOpenness(this.openness - increment);\r\n    }\r\n    \r\n    // Rotate the sail by a certain amount\r\n    rotate(degrees: number): void {\r\n        // Limit the sail angle to -75 to +75 degrees\r\n        this.angle = Math.max(-75, Math.min(75, this.angle + degrees));\r\n    }\r\n    \r\n    // Center the sail angle (move towards 0 degrees)\r\n    centerAngle(increment: number = 1.25): void {\r\n        if (this.angle > 0) {\r\n            this.angle = Math.max(0, this.angle - increment);\r\n        } else if (this.angle < 0) {\r\n            this.angle = Math.min(0, this.angle + increment);\r\n        }\r\n    }\r\n      // Calculate sail efficiency based on wind angle (would be called by Ship)\r\n    calculateEfficiency(windDirection: number, shipAngle: number): number {\r\n        // Calculate the sail's normal vector (perpendicular to sail face)\r\n        const sailAngleRad = this.angle * Math.PI / 180;\r\n        const sailNormalAngle = shipAngle + sailAngleRad + Math.PI/2; // Add 90 degrees to get normal\r\n        \r\n        // Calculate sail direction vector components (normal to sail face)\r\n        const sailNormalX = Math.cos(sailNormalAngle);\r\n        const sailNormalY = Math.sin(sailNormalAngle);\r\n        \r\n        // Calculate wind direction vector components (where the wind is going)\r\n        const windDirX = Math.cos(windDirection);\r\n        const windDirY = Math.sin(windDirection);\r\n        \r\n        // Calculate dot product between wind direction and sail normal\r\n        const dotProduct = windDirX * sailNormalX + windDirY * sailNormalY;\r\n        \r\n        // Calculate angle between wind direction and sail normal vector\r\n        let windSailAngleDiff = Math.acos(Math.min(1, Math.max(-1, dotProduct)));\r\n        \r\n        // Convert angle to degrees\r\n        const angleDiffDegrees = windSailAngleDiff * 180 / Math.PI;\r\n        \r\n        let efficiency = 0;\r\n        \r\n        // Calculate efficiency based on angle difference\r\n        if (angleDiffDegrees <= 90) {\r\n            // Linear interpolation from 1.0 (direct) to 0.35 (90 degrees off)\r\n            efficiency = 1.0 - (0.65 * angleDiffDegrees / 90);\r\n        } else {\r\n            // Default to 35% efficiency when outside the optimal range\r\n            efficiency = 0.35;\r\n        }\r\n        \r\n        // Scale by sail openness\r\n        const sailOpenness = this.openness / 100;\r\n        \r\n        // Scale efficiency from 0-1 range\r\n        efficiency = Math.min(1, Math.max(0.35, efficiency)) * sailOpenness;\r\n        \r\n        return efficiency;\r\n    }\r\n    \r\n    override update(): void {\r\n        // Update sail state if needed\r\n    }\r\n    \r\n    override use(): void {\r\n        // Toggle sail state (e.g., start opening/closing)\r\n    }\r\n}","// WheelModule.ts - Specialized class for ship steering wheel\r\nimport { BaseModule } from './BaseModule';\r\n\r\nexport class WheelModule extends BaseModule {\r\n    wheelAngle: number = 0; // Current rotation of the wheel (-30 to +30 degrees)\r\n    isPlayerControlling: boolean = false; // Whether a player is at the wheel\r\n    \r\n    constructor(position: { x: number; y: number }) {\r\n        super('wheel', position, 0);\r\n    }\r\n    \r\n    // Set the wheel angle\r\n    setWheelAngle(degrees: number): void {\r\n        // Limit the wheel angle to -30 to +30 degrees\r\n        this.wheelAngle = Math.max(-30, Math.min(30, degrees));\r\n    }\r\n    \r\n    // Turn the wheel left by an increment\r\n    turnLeft(increment: number = 0.5): void {\r\n        this.setWheelAngle(this.wheelAngle - increment);\r\n    }\r\n    \r\n    // Turn the wheel right by an increment\r\n    turnRight(increment: number = 0.5): void {\r\n        this.setWheelAngle(this.wheelAngle + increment);\r\n    }\r\n    \r\n    // Center the wheel (move towards 0 degrees)\r\n    centerWheel(increment: number = 0.5): void {\r\n        if (this.wheelAngle > 0) {\r\n            this.wheelAngle = Math.max(0, this.wheelAngle - increment);\r\n        } else if (this.wheelAngle < 0) {\r\n            this.wheelAngle = Math.min(0, this.wheelAngle + increment);\r\n        }\r\n    }\r\n    \r\n    // Set player controlling state\r\n    setPlayerControlling(isControlling: boolean): void {\r\n        this.isPlayerControlling = isControlling;\r\n    }\r\n    \r\n    override update(): void {\r\n        // Update wheel state if needed\r\n    }\r\n    \r\n    override use(): void {\r\n        // Toggle interaction with the wheel\r\n    }\r\n}","import Matter from 'matter-js';\r\nimport { BaseModule, CannonModule, SailModule, WheelModule } from './modules';\r\n\r\nexport type ModuleType = 'cannon' | 'sail' | 'wheel' | 'plank';\r\n\r\n// Keeping the ShipModule interface for backward compatibility during transition\r\nexport interface ShipModule {\r\n    type: ModuleType;\r\n    position: { x: number; y: number };\r\n    rotation: number;\r\n    health: number;\r\n    openness?: number; // How open a sail is (0-100%)\r\n    angle?: number;    // Angle of the sail relative to the mast (-45 to +45 degrees)\r\n    turretAngle?: number; // Angle of the cannon turret for aiming\r\n    body?: Matter.Body;\r\n    update(): void;\r\n    use(): void;\r\n}\r\n\r\nexport default class Ship {\r\n    // Ship's position - this is now a single unified center for all aspects (visual, physics, walkable)\r\n    position: { x: number; y: number };\r\n    size: { width: number; height: number };\r\n    speed: number;\r\n    health: number;\r\n    body: Matter.Body;\r\n    \r\n    // Updated modules storage - can store both legacy and new module types\r\n    modules: Map<string, ShipModule | BaseModule> = new Map();\r\n    \r\n    // Typed collections for specific module types (for easier access)\r\n    cannons: Map<string, CannonModule> = new Map();\r\n    sails: Map<string, SailModule> = new Map();\r\n    wheels: Map<string, WheelModule> = new Map();\r\n    \r\n    planks: Array<{ position: { x: number, y: number }, health: number, body: Matter.Body }> = [];\r\n    waterLevel: number = 0;\r\n    \r\n    // Ship sailing properties\r\n    rudderAngle: number = 0;       // Current rudder angle (-30 to +30 degrees)\r\n    sailsOpenness: number = 0;     // Overall sail openness (0-100%)\r\n    currentWindDirection: number = 0; // Current wind direction\r\n    currentWindPower: number = 0;    // Current wind power\r\n    \r\n    // Ship physics properties\r\n    forwardForce: number = 0;      // Current forward propulsion force\r\n    turningForce: number = 0;      // Current turning force\r\n    momentum: number = 0;          // Ship's current momentum (affects turning)\r\n    \r\n    // Path for the brigantine ship shape\r\n    path: Path2D | null = null;\r\n    \r\n    // Module view positions tracker to ensure consistency between visual and logical positions\r\n    private moduleVisualPositions: Map<string, {x: number, y: number}> = new Map();\r\n    \r\n    // All center points are now aligned at the same position\r\n    // No offset values needed - we're using a single unified center point for all ship positions\r\n    // This eliminates inconsistencies during rotation\r\n    \r\n    // Player status properties\r\n    playerAtWheel: boolean = false;  // Track if player is at the wheel or freely walking\r\n\r\n    // Reference to the Game instance for adding cannonballs\r\n    private game: any;\r\n\r\n    // --- Shared hull and feature definitions (single source of truth) ---\r\n    // Hull path points (for Path2D and collision)\r\n    private static readonly HULL_POINTS = {\r\n        bow: { x: 190, y: 90 },\r\n        bowTip: { x: 415, y: 0 },\r\n        bowBottom: { x: 190, y: -90 },\r\n        sternBottom: { x: -260, y: -90 },\r\n        sternTip: { x: -345, y: 0 },\r\n        stern: { x: -260, y: 90 }\r\n    };\r\n    // Mast positions (centered on hull)\r\n    private static readonly MASTS = [\r\n        { x: 165, y: 0, r: 30 },   // Front mast\r\n        { x: -35, y: 0, r: 30 },   // Middle mast\r\n        { x: -235, y: 0, r: 30 },  // Back mast\r\n    ];\r\n    // Wheel position and shape (rectangle, not circle)\r\n    private static readonly WHEEL = { x: -90, y: 0, w: 20, h: 40 };\r\n    // Cannon positions (centered on hull)\r\n    private static readonly CANNONS = [\r\n        { x: -35, y: 75, w: 30, h: 30 },    // Bottom center cannon\r\n        { x: 65, y: 75, w: 30, h: 30 },     // Bottom right cannon\r\n        { x: -135, y: 75, w: 30, h: 30 },   // Bottom left cannon\r\n        { x: -35, y: -75, w: 30, h: 30 },   // Top center cannon\r\n        { x: 65, y: -75, w: 30, h: 30 },    // Top right cannon\r\n        { x: -135, y: -75, w: 30, h: 30 },  // Top left cannon\r\n    ];\r\n\r\n    // --- Hull Path2D generator (always up to date) ---\r\n    static createHullPath(): Path2D {\r\n        const p = Ship.HULL_POINTS;\r\n        const path = new Path2D();\r\n        path.moveTo(p.bow.x, p.bow.y);\r\n        path.quadraticCurveTo(p.bowTip.x, p.bowTip.y, p.bow.x, p.bowBottom.y);\r\n        path.lineTo(p.sternBottom.x, p.sternBottom.y);\r\n        path.quadraticCurveTo(p.sternTip.x, p.sternTip.y, p.stern.x, p.stern.y);\r\n        path.closePath();\r\n        return path;\r\n    }    constructor(x: number, y: number, _width: number, _height: number, speed: number) {\r\n        // Initialize position\r\n        this.position = { x, y };\r\n        this.speed = speed;\r\n        this.health = 100; // Default health\r\n        this.game = null; // Initialize game reference\r\n        \r\n        // Initialize physics properties\r\n        this.forwardForce = 0;\r\n        this.turningForce = 0;\r\n        this.momentum = 0;\r\n        \r\n        // Create a more appropriate physics body for the brigantine shape\r\n        // Using a rectangle that better approximates the full drawn path dimensions\r\n        // Visual hull extends to control points at x=570 (bow) and x=-325 (stern)\r\n        // Using 620x180 to account for the full visual width including curves and extended bow\r\n        const fullShipWidth = 620; // Increased from 550 to extend the bow by approximately 1/8 of ship length (~70px)\r\n        \r\n        // Create physics body at its own position\r\n        this.body = Matter.Bodies.rectangle(x, y, fullShipWidth, 180, {\r\n            label: 'ship',\r\n            density: 0.0005, // Lower density to make the ship more responsive\r\n            frictionAir: 0.05, // Reduced air friction for more momentum\r\n            friction: 0.03, // Reduced surface friction\r\n            restitution: 0.1, // Minimal bounce\r\n            inertia: Infinity, // Prevent rotation from collisions\r\n            angle: 0, // Keep the ship upright initially\r\n            sleepThreshold: 15, // Make the ship stop moving more quickly when no forces are applied\r\n            slop: 0.05 // Tolerance for physics engine to consider the ship at rest\r\n        });\r\n        \r\n        // Store the wider visual dimensions for proper deck boundary calculations\r\n        this.size = { width: fullShipWidth, height: 180 };\r\n        \r\n        // Initialize the hull path for collision detection and visual rendering\r\n        this.path = Ship.createHullPath();\r\n        \r\n        // Initialize ship with basic planks\r\n        this.createPlankStructure();\r\n    }\r\n\r\n    // Create a basic plank structure for the ship\r\n    private createPlankStructure(): void {\r\n        // Create planks around the perimeter of the ship\r\n        const totalPlanks = 40; // Total number of planks around the ship's perimeter\r\n        \r\n        // Place planks evenly around the brigantine shape\r\n        for (let i = 0; i < totalPlanks; i++) {\r\n            // Calculate angle for this plank\r\n            const angle = (i / totalPlanks) * Math.PI * 2;\r\n            \r\n            // Use consistent radius to match the hull shape\r\n            const radiusX = 225; // Match the width of the hull\r\n            const radiusY = 90;  // Match the height of the hull\r\n            \r\n            // Place the plank on the hull perimeter\r\n            this.addPlank(\r\n                this.position.x + Math.cos(angle) * radiusX, \r\n                this.position.y + Math.sin(angle) * radiusY\r\n            );\r\n        }\r\n        \r\n        // Add some structural planks inside\r\n        for (let x = -150; x <= 150; x += 50) {\r\n            this.addPlank(this.position.x + x, this.position.y);\r\n            this.addPlank(this.position.x + x, this.position.y - 40);\r\n            this.addPlank(this.position.x + x, this.position.y + 40);\r\n        }\r\n    }\r\n    \r\n    // Add a single plank to the ship\r\n    private addPlank(x: number, y: number): void {\r\n        const plankSize = 15; // Size of each plank\r\n        const plankBody = Matter.Bodies.rectangle(x, y, plankSize, plankSize, {\r\n            label: 'plank',\r\n            isSensor: true,\r\n            density: 0.001\r\n        });\r\n        \r\n        this.planks.push({\r\n            position: { x, y },\r\n            health: 100,\r\n            body: plankBody\r\n        });\r\n    }\r\n      // Add a module to the ship\r\n    addModule(id: string, moduleOrData: ShipModule | BaseModule): boolean {\r\n        // Check if it's one of our new module types\r\n        if (moduleOrData instanceof BaseModule) {\r\n            const module = moduleOrData;\r\n            \r\n            // Store in the general modules map\r\n            this.modules.set(id, module);\r\n            \r\n            // Also store in the type-specific collection\r\n            if (module instanceof CannonModule) {\r\n                this.cannons.set(id, module);\r\n                // Set game reference for creating cannonballs\r\n                module.setGame(this.game);\r\n            } else if (module instanceof SailModule) {\r\n                this.sails.set(id, module);\r\n            } else if (module instanceof WheelModule) {\r\n                this.wheels.set(id, module);\r\n            }\r\n            \r\n            return true;\r\n        }\r\n        \r\n        // Handle legacy ShipModule object\r\n        const module = moduleOrData as ShipModule;\r\n        \r\n        // Check if this is a standard module with a predefined visual position\r\n        this.ensureModuleVisualPosition(id, module);\r\n        \r\n        // Store the module in the general map\r\n        this.modules.set(id, module);\r\n        \r\n        // Create and store the appropriate module class based on type\r\n        if (module.type === 'cannon') {\r\n            const cannonModule = new CannonModule(module.position, module.rotation);\r\n            cannonModule.turretAngle = module.turretAngle || 0;\r\n            cannonModule.setGame(this.game);\r\n            this.cannons.set(id, cannonModule);\r\n        } else if (module.type === 'sail') {\r\n            const sailModule = new SailModule(module.position);\r\n            sailModule.openness = module.openness || 0;\r\n            sailModule.angle = module.angle || 0;\r\n            this.sails.set(id, sailModule);\r\n        } else if (module.type === 'wheel') {\r\n            const wheelModule = new WheelModule(module.position);\r\n            this.wheels.set(id, wheelModule);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // Ensures that module has correct visual position for rendering and collision\r\n    private ensureModuleVisualPosition(id: string, module: ShipModule): void {\r\n        // Store the original module position as its visual position\r\n        this.moduleVisualPositions.set(id, {...module.position});\r\n        \r\n        // Match module to standard ship fixtures if appropriate\r\n        if (module.type === 'wheel' && Ship.WHEEL.x === module.position.x && Ship.WHEEL.y === module.position.y) {\r\n            // This is the main wheel - use exact coordinates from WHEEL constant\r\n            module.position = { x: Ship.WHEEL.x, y: Ship.WHEEL.y };\r\n        } \r\n        else if (module.type === 'sail') {\r\n            // Find the closest mast position for this sail\r\n            const matchingMast = Ship.MASTS.find(mast => \r\n                Math.abs(mast.x - module.position.x) < 20 && \r\n                Math.abs(mast.y - module.position.y) < 20);\r\n                \r\n            if (matchingMast) {\r\n                // Use exact mast coordinates for this sail\r\n                module.position = { x: matchingMast.x, y: matchingMast.y };\r\n            }\r\n        }\r\n        else if (module.type === 'cannon') {\r\n            // Find the closest cannon position\r\n            const matchingCannon = Ship.CANNONS.find(cannon => \r\n                Math.abs(cannon.x - module.position.x) < 20 && \r\n                Math.abs(cannon.y - module.position.y) < 20);\r\n                \r\n            if (matchingCannon) {\r\n                // Use exact cannon coordinates\r\n                module.position = { x: matchingCannon.x, y: matchingCannon.y };\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Get the visual position for a module (used for rendering)\r\n    private getModuleVisualPosition(id: string): { x: number, y: number } {\r\n        // If we have a stored visual position, use it\r\n        if (this.moduleVisualPositions.has(id)) {\r\n            return this.moduleVisualPositions.get(id)!;\r\n        }\r\n        \r\n        // Otherwise, use the module's position directly\r\n        const module = this.modules.get(id);\r\n        return module ? module.position : { x: 0, y: 0 };\r\n    }\r\n    \r\n    // Remove a module from the ship\r\n    removeModule(id: string): boolean {\r\n        if (!this.modules.has(id)) {\r\n            return false;\r\n        }\r\n        \r\n        this.modules.delete(id);\r\n        return true;\r\n    }\r\n    \r\n    // Update all modules\r\n    updateModules(): void {\r\n        // Update all modules in the ship\r\n        \r\n        // First, update the specialized module collections\r\n        this.cannons.forEach(cannon => cannon.update());\r\n        this.sails.forEach(sail => sail.update());\r\n        this.wheels.forEach(wheel => wheel.update());\r\n        \r\n        // Update any remaining legacy modules\r\n        this.modules.forEach((module, id) => {\r\n            // Skip updating modules that are already in the specialized collections\r\n            if (module instanceof BaseModule) {\r\n                // Already updated above\r\n                return;\r\n            }\r\n            \r\n            // Make sure module positions are consistent with visual positions\r\n            if (this.moduleVisualPositions.has(id)) {\r\n                // Update the moduleVisualPositions if needed for any dynamically moved modules\r\n                if (module.type === 'sail' || module.type === 'cannon' || module.type === 'wheel') {\r\n                    // For fixed modules like sails, cannons, and wheel, we ensure they stay at their fixed positions\r\n                    this.ensureModuleVisualPosition(id, module);\r\n                }\r\n            }\r\n            \r\n            // Call the module's update method\r\n            module.update();\r\n        });\r\n    }\r\n    \r\n    // Calculate water intake based on damaged planks\r\n    calculateWaterIntake(): number {\r\n        let damagedPlankCount = 0;\r\n        \r\n        for (const plank of this.planks) {\r\n            if (plank.health < 50) {\r\n                damagedPlankCount++;\r\n            }\r\n        }\r\n        \r\n        return damagedPlankCount * 0.05; // 5% water per damaged plank\r\n    }\r\n    \r\n    // Update the ship's water level\r\n    updateWaterLevel(): void {\r\n        const waterIntake = this.calculateWaterIntake();\r\n        this.waterLevel += waterIntake;\r\n        \r\n        if (this.waterLevel >= 100) {\r\n            this.sink();\r\n        }\r\n    }\r\n    \r\n    // Function to handle the ship sinking\r\n    sink(): void {\r\n        // Debug logging removed to be reimplemented\r\n        // Implement sinking mechanics\r\n    }\r\n    \r\n    // Take damage to a specific plank\r\n    damagePlank(plankIndex: number, amount: number): void {\r\n        if (plankIndex >= 0 && plankIndex < this.planks.length) {\r\n            this.planks[plankIndex].health -= amount;\r\n            if (this.planks[plankIndex].health < 0) {\r\n                this.planks[plankIndex].health = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Apply rudder force to turn the ship\r\n    applyRudder(direction: 'left' | 'right' | 'center'): void {\r\n        // Make rudder change rate more gradual\r\n        const baseRudderChangeRate = 0.5; // Base rate for rudder change\r\n        \r\n        // Calculate current ship speed\r\n        const currentSpeed = Math.sqrt(\r\n            this.body.velocity.x ** 2 + \r\n            this.body.velocity.y ** 2\r\n        );\r\n        \r\n        // Update the ship's momentum value (used for turning calculations)\r\n        // Momentum builds up more at higher speeds, making turning harder\r\n        this.momentum = Math.min(1.0, this.momentum * 0.95 + currentSpeed * 0.01);\r\n\r\n        // Adjust rudder change rate based on current ship speed\r\n        // For visual feedback, we actually want faster rudder movement at higher speeds\r\n        // This gives a value between 0.5 and 1.2 times the base rate\r\n        const visualSpeedFactor = 0.5 + Math.min(0.7, currentSpeed / 3);\r\n        const rudderChangeRate = baseRudderChangeRate * visualSpeedFactor;\r\n        \r\n        // Adjust rudder angle based on input with the dynamic change rate\r\n        switch (direction) {\r\n            case 'left':\r\n                this.rudderAngle = Math.max(-30, this.rudderAngle - rudderChangeRate);\r\n                break;\r\n            case 'right':\r\n                this.rudderAngle = Math.min(30, this.rudderAngle + rudderChangeRate);\r\n                break;\r\n            case 'center':\r\n                // Return rudder to center position\r\n                if (this.rudderAngle > 0) {\r\n                    this.rudderAngle = Math.max(0, this.rudderAngle - rudderChangeRate);\r\n                } else if (this.rudderAngle < 0) {\r\n                    this.rudderAngle = Math.min(0, this.rudderAngle + rudderChangeRate);\r\n                }\r\n                break;\r\n        }\r\n        \r\n        // Update wheel angle to match rudder angle (if we have wheels)\r\n        if (this.wheels.size > 0) {\r\n            // Get the first wheel (typically there's only one)\r\n            const wheel = this.wheels.values().next().value;\r\n            if (wheel) {\r\n                wheel.setWheelAngle(this.rudderAngle);\r\n            }\r\n        }\r\n        \r\n        // Calculate sail power to correlate turning with wind force\r\n        let sailPower = 0;\r\n        let sailCount = 0;\r\n        \r\n        // Calculate average sail openness and efficiency using the typed collection\r\n        this.sails.forEach(sail => {\r\n            if (sail.openness > 0) {\r\n                sailPower += sail.openness;\r\n                sailCount += 1;\r\n            }\r\n        });\r\n        \r\n        // Get average sail power as a factor between 0 and 1\r\n        const avgSailPower = sailCount > 0 ? sailPower / (sailCount * 100) : 0;\r\n        \r\n        // Calculate base turning force\r\n        const baseTurningPower = 0.000015; // Base turning power constant\r\n        \r\n        // NEW TURNING LOGIC: Less effective at higher speeds due to inertia\r\n        // Calculate turning effectiveness as inverse to speed with a minimum value\r\n        // At speed 0: turnEffectiveness = 1.0\r\n        // At high speed: turnEffectiveness approaches 0.3\r\n        const turnEffectiveness = Math.max(0.3, 1 - (this.momentum * 0.7));\r\n        \r\n        // Apply sail power as a factor (no sails = reduced turning)\r\n        const sailFactor = 0.3 + 0.7 * avgSailPower;\r\n        \r\n        // Calculate final turning force\r\n        this.turningForce = this.rudderAngle * baseTurningPower * turnEffectiveness * sailFactor;\r\n        \r\n        // Apply the turning force as a torque\r\n        // We now apply force even when the ship is stationary (as long as sails are open)\r\n        // This allows the ship to start turning from a standstill\r\n        if (currentSpeed > 0.05 || avgSailPower > 0) {\r\n            Matter.Body.setAngularVelocity(this.body, this.body.angularVelocity + this.turningForce);\r\n        }\r\n        \r\n        // Update visual position based on physics body position\r\n        this.position.x = this.body.position.x;\r\n        this.position.y = this.body.position.y;\r\n    }\r\n    \r\n    // Calculate wind power based on sail angle relative to wind direction\r\n    calculateSailEfficiency(): number {\r\n        // Get sail angles across all sails\r\n        let totalEfficiency = 0;\r\n        let sailCount = 0;\r\n        \r\n        // Use the typed sails collection instead of generic modules\r\n        this.sails.forEach(sailModule => {\r\n            if (sailModule.openness > 0) {\r\n                const sailAngle = sailModule.angle; // Now directly accessing SailModule properties\r\n                \r\n                // Calculate angle between wind and sail\r\n                // We need to account for:\r\n                // 1. The ship's orientation (body.angle)\r\n                // 2. The sail's rotation relative to the ship (sailAngle)\r\n                // 3. The wind direction\r\n                \r\n                // Convert sail angle from degrees to radians\r\n                const sailAngleRad = sailAngle * Math.PI / 180;\r\n                \r\n                // Calculate the sail's normal vector (perpendicular to sail face)\r\n                // The sail normal is perpendicular to its face and indicates which way it's pointing\r\n                const sailNormalAngle = this.body.angle + sailAngleRad + Math.PI/2; // Add 90 degrees to get normal\r\n                \r\n                // Calculate sail direction vector components (normal to sail face)\r\n                const sailNormalX = Math.cos(sailNormalAngle);\r\n                const sailNormalY = Math.sin(sailNormalAngle);\r\n                \r\n                // FIXED: Use the inverted wind direction to match the corrected visualization\r\n                // The visualization shows where the wind comes FROM (meteorological convention)\r\n                // But physics uses where the wind goes TO (mathematical vector convention)\r\n                // We need to flip the direction by adding PI (180 degrees) to align them\r\n                const physicsWindDirection = this.currentWindDirection;\r\n                \r\n                // Calculate wind direction vector components (where the wind is going)\r\n                const windDirX = Math.cos(physicsWindDirection);\r\n                const windDirY = Math.sin(physicsWindDirection);\r\n                \r\n                // Calculate dot product between wind direction and sail normal\r\n                // Positive dot product: wind hits sail from front\r\n                // Negative dot product: wind hits sail from behind\r\n                const dotProduct = windDirX * sailNormalX + windDirY * sailNormalY;\r\n                \r\n                // Calculate angle between wind direction and sail normal vector\r\n                let windSailAngleDiff = Math.acos(Math.min(1, Math.max(-1, dotProduct)));\r\n                \r\n                let efficiency = 0;\r\n                \r\n                // NEW HALF-CIRCLE SAIL RANGE IMPLEMENTATION:\r\n                // Sail efficiency is now based on a half-circle range (+/- 90 degrees from wind direction)\r\n                // Maximum efficiency when directly pointing at wind direction\r\n                // 35% efficiency at the tolerance edges (90 degrees off wind)\r\n                \r\n                // Calculate the angle between the sail normal vector and wind direction in degrees\r\n                const angleDiffDegrees = windSailAngleDiff * 180 / Math.PI;\r\n                \r\n                // Only consider angles within +/- 90 degrees of the wind direction for optimal efficiency\r\n                if (angleDiffDegrees <= 90) {\r\n                    // Linear interpolation from 1.0 (direct) to 0.35 (90 degrees off)\r\n                    // When angleDiffDegrees = 0: efficiency = 1.0\r\n                    // When angleDiffDegrees = 90: efficiency = 0.35\r\n                    efficiency = 1.0 - (0.65 * angleDiffDegrees / 90);\r\n                } else {\r\n                    // Default to 35% efficiency when outside the optimal range\r\n                    efficiency = 0.35;\r\n                }\r\n                \r\n                // Scale efficiency from 0-1 range\r\n                efficiency = Math.min(1, Math.max(0.35, efficiency));\r\n                \r\n                // Scale by sail openness\r\n                const sailOpenness = sailModule.openness / 100;\r\n                \r\n                // Only add angle bonus if we already have some efficiency\r\n                let angleBonus = 0;\r\n                if (efficiency > 0) {\r\n                    // Add a bonus for angled sails - this rewards using the wider range\r\n                    // Sails angled more dramatically catch more wind when appropriate\r\n                    angleBonus = Math.min(0.2, Math.abs(sailAngle) / 75 * 0.2);\r\n                }\r\n                \r\n                totalEfficiency += (efficiency + angleBonus) * sailOpenness;\r\n                sailCount++;\r\n            }\r\n        });\r\n        \r\n        return sailCount > 0 ? Math.min(1.5, totalEfficiency / sailCount) : 0; // Cap at 150% efficiency\r\n    }\r\n    \r\n    // Rotate all sails by a certain angle\r\n    rotateSails(direction: 'left' | 'right' | 'center'): void {\r\n        const rotationRate = 1.25; // Degrees per call (reduced to 25% of original 5 degrees)\r\n        \r\n        // Use the typed sails collection\r\n        this.sails.forEach(sail => {\r\n            // Adjust angle based on direction\r\n            switch (direction) {\r\n                case 'left':\r\n                    sail.rotate(-rotationRate); // Use SailModule's rotate method\r\n                    break;\r\n                case 'right':\r\n                    sail.rotate(rotationRate);\r\n                    break;\r\n                case 'center':\r\n                    // Return sails to center position\r\n                    sail.centerAngle(rotationRate);\r\n                    break;\r\n            }\r\n        });\r\n    }    fireCannon(targetPosition?: { x: number, y: number }): void {\r\n        // Check if we have any cannons\r\n        if (this.cannons.size === 0) {\r\n            return;\r\n        }\r\n          // Fire all cannons\r\n        this.cannons.forEach(cannon => {\r\n            cannon.use();\r\n            \r\n            // Create a cannonball if we have a target position\r\n            if (targetPosition) {\r\n                // Find the corresponding Ship.CANNONS constant entry for this cannon module\r\n                const cannonConstant = Ship.CANNONS.find(c => \r\n                    c.x === cannon.position.x && c.y === cannon.position.y\r\n                );\r\n                \r\n                if (!cannonConstant) {\r\n                    // Couldn't find matching cannon constant - should never happen\r\n                    return;\r\n                }\r\n                \r\n                // Determine if this is a top or bottom cannon\r\n                const isTopCannon = cannonConstant.y < 0;\r\n                \r\n                // Base rotation for cannon (0 for bottom, PI for top)\r\n                const baseRotation = isTopCannon ? Math.PI : 0;\r\n                \r\n                // Convert cannon position from local to world coordinates\r\n                const cannonWorldPos = {\r\n                    x: this.position.x + Math.cos(this.body.angle) * cannon.position.x - Math.sin(this.body.angle) * cannon.position.y,\r\n                    y: this.position.y + Math.sin(this.body.angle) * cannon.position.x + Math.cos(this.body.angle) * cannon.position.y\r\n                };\r\n                \r\n                // Calculate the cannon barrel's full length (40 units)\r\n                const barrelLength = 40;\r\n                \r\n                // Calculate the final firing angle - include ship rotation, base cannon rotation, and turret angle\r\n                const firingAngle = this.body.angle + baseRotation + cannon.turretAngle;\r\n                \r\n                // Calculate barrel end position using the final firing angle\r\n                const barrelEndX = cannonWorldPos.x + Math.cos(firingAngle) * barrelLength;\r\n                const barrelEndY = cannonWorldPos.y + Math.sin(firingAngle) * barrelLength;\r\n                \r\n                // Create the cannonball at the barrel end position with the firing angle\r\n                this.createCannonball(barrelEndX, barrelEndY, firingAngle);\r\n            }\r\n        });\r\n    }// Create a cannonball projectile\r\n    private createCannonball(x: number, y: number, angle: number): void {\r\n        // If we have a game reference, use it to add the cannonball\r\n        if (this.game && this.game.addCannonball) {\r\n            // Use the game's method to create and add a cannonball\r\n            this.game.addCannonball(x, y, angle, 10);\r\n        } else {\r\n            // Fallback when game reference is not set\r\n            console.log(`Fired cannonball at (${x}, ${y}) with angle ${angle}`);\r\n        }\r\n    }    // Take damage\r\n    takeDamage(amount: number): void {\r\n        this.health -= amount;\r\n        if (this.health <= 0) {\r\n            this.destroy();\r\n        }\r\n    }\r\n    \r\n    // Set the game reference\r\n    setGame(game: any): void {\r\n        this.game = game;\r\n    }\r\n\r\n    // Apply wind forces to the ship based on sail configuration\r\n    applyWindForce(windDirection: number, windPower: number): void {\r\n        \r\n        // Store the current wind direction and power for use in other methods\r\n        this.currentWindDirection = windDirection;\r\n        this.currentWindPower = windPower;\r\n\r\n        // Get the average openness of all sail modules\r\n        let totalSailOpenness = 0;\r\n        let sailCount = 0;\r\n        let sailsAreOpen = false;\r\n        \r\n        // Use the typed sails collection\r\n        this.sails.forEach(sail => {\r\n            const openness = sail.openness;\r\n            totalSailOpenness += openness;\r\n            sailCount++;\r\n            \r\n            if (openness > 0) {\r\n                sailsAreOpen = true;\r\n            }\r\n        });\r\n        \r\n        // Average sail openness (0-100%)\r\n        const avgSailOpenness = sailCount > 0 ? totalSailOpenness / sailCount : 0;\r\n        \r\n        // Apply drag based on sail openness and momentum\r\n        // When sails are 0% open: strong drag (0.85)\r\n        // When sails are 100% open: lighter drag (0.98)\r\n        // We also factor in the ship's momentum - more momentum = less drag\r\n        const momentumFactor = Math.min(0.05, this.momentum * 0.05);\r\n        const dragFactor = sailsAreOpen ? \r\n            0.85 + (avgSailOpenness / 100) * 0.13 + momentumFactor : // Add momentum bonus to drag reduction\r\n            0.85; // Strong drag when sails are closed\r\n        \r\n        // Apply drag to slow the ship\r\n        Matter.Body.setVelocity(this.body, {\r\n            x: this.body.velocity.x * dragFactor,\r\n            y: this.body.velocity.y * dragFactor\r\n        });\r\n        \r\n        // Stop the ship completely if it's moving very slowly and sails are closed\r\n        if (!sailsAreOpen && \r\n            Math.abs(this.body.velocity.x) < 0.05 && \r\n            Math.abs(this.body.velocity.y) < 0.05) {\r\n            Matter.Body.setVelocity(this.body, { x: 0, y: 0 });\r\n            \r\n            // Reset momentum when stopped\r\n            this.momentum = 0;\r\n        }\r\n        \r\n        // Only apply wind force if sails are open\r\n        if (sailsAreOpen) {\r\n            // Calculate sail efficiency based on wind angle\r\n            const sailEfficiency = this.calculateSailEfficiency();\r\n            \r\n            // FIXED: Get wind direction components\r\n            // Use the same physics wind direction throughout all calculations\r\n            const physicsWindDirection = windDirection;\r\n            const windDirectionX = Math.cos(physicsWindDirection);\r\n            const windDirectionY = Math.sin(physicsWindDirection);\r\n            \r\n            // Calculate ship's forward direction vector based on its rotation\r\n            const shipDirectionX = Math.cos(this.body.angle);\r\n            const shipDirectionY = Math.sin(this.body.angle);\r\n            \r\n            // Calculate wind angle relative to ship (needed for proper sailing physics)\r\n            const relativeWindAngle = Math.atan2(\r\n                windDirectionY * shipDirectionX - windDirectionX * shipDirectionY,\r\n                windDirectionX * shipDirectionX + windDirectionY * shipDirectionY\r\n            );\r\n            \r\n            // Calculate force magnitude based on sail efficiency and wind power\r\n            // Apply a minimum efficiency of 0.35 (35%) to ensure the ship always gets some power\r\n            const minEfficiency = 0.35;\r\n            const baseEfficiency = Math.max(minEfficiency, sailEfficiency);\r\n            this.forwardForce = windPower * baseEfficiency * 0.024;\r\n            \r\n            // Calculate ship's orientation relative to wind for additional alignment factor\r\n            // This creates a more realistic sailing model without duplicating the efficiency calculation\r\n            \r\n            // Convert relative angle to absolute value in range 0 to PI\r\n            const absRelativeAngle = Math.abs(relativeWindAngle);\r\n            \r\n            // Calculate the angle difference in degrees (0-180)\r\n            const angleDiffDegrees = absRelativeAngle * 180 / Math.PI;\r\n            \r\n            // Apply a gentle alignment factor based on how the ship is facing relative to wind\r\n            // This is separate from sail angle efficiency and represents hull hydrodynamics\r\n            // Ships move more efficiently when pointed with/against the wind than across it\r\n            let alignmentFactor = 1.0;\r\n            if (angleDiffDegrees <= 90) {\r\n                // Linear interpolation from 1.0 (direct) to 0.35 (90 degrees off)\r\n                // When angleDiffDegrees = 0: efficiency = 1.0\r\n                // When angleDiffDegrees = 90: efficiency = 0.35\r\n                alignmentFactor = 1.0 - (0.65 * angleDiffDegrees / 90);\r\n            } else {\r\n                // Default to 35% efficiency when outside the optimal range\r\n                alignmentFactor = 0.35 * Math.max(0, 1 - (angleDiffDegrees - 90) / 90);\r\n            }\r\n            \r\n            // Scale to a minimum of 10%\r\n            alignmentFactor = Math.max(0.1, alignmentFactor);\r\n            \r\n            // Only apply forward force if we have some sail efficiency\r\n            const finalForce = sailEfficiency > 0 ? this.forwardForce * alignmentFactor : 0;\r\n            \r\n            // Force is always applied in the ship's forward direction\r\n            // The wind and sail efficiency just determine how much force (speed) the ship gets\r\n            const forceVector = {\r\n                x: shipDirectionX * finalForce,\r\n                y: shipDirectionY * finalForce\r\n            };\r\n            \r\n            // Apply force in the ship's forward direction\r\n            Matter.Body.applyForce(this.body, this.body.position, forceVector);\r\n        }\r\n    }\r\n\r\n    // Open or close the sails by a specific percentage\r\n    adjustSails(openPercent: number): void {\r\n        // Use the typed sails collection directly\r\n        this.sails.forEach(sail => {\r\n            sail.setOpenness(openPercent); // Use the SailModule's setOpenness method\r\n        });\r\n    }\r\n\r\n    // Gradually open all sails by 10%\r\n    openSails(): void {\r\n        // Use the typed sails collection directly\r\n        this.sails.forEach(sail => {\r\n            sail.open(10); // Use the SailModule's open method\r\n        });\r\n    }\r\n\r\n    // Gradually close all sails by 10%\r\n    closeSails(): void {\r\n        // Use the typed sails collection directly\r\n        this.sails.forEach(sail => {\r\n            sail.close(10); // Use the SailModule's close method\r\n        });\r\n    }\r\n\r\n    // Check if a position is on the ship's deck (matches visual hull if ctx provided, excludes obstacles)\r\n    isPositionOnDeck(x: number, y: number, ctx?: CanvasRenderingContext2D): boolean {\r\n        const localX = x - this.position.x;\r\n        const localY = y - this.position.y;\r\n        const cosA = Math.cos(-this.body.angle);\r\n        const sinA = Math.sin(-this.body.angle);\r\n        const rotatedX = localX * cosA - localY * sinA;\r\n        const rotatedY = localX * sinA + localY * cosA;\r\n        \r\n        // Use hull path for walkable area if available\r\n        if (this.path && ctx) {\r\n            // Use the path to determine if point is inside hull\r\n            if (!ctx.isPointInPath(this.path, rotatedX, rotatedY)) {\r\n                return false; // Outside hull\r\n            }\r\n        } else {\r\n            // Fallback to simple boundary check if path isn't available\r\n            // Based on hull points: bow, stern, etc.\r\n            if (rotatedX < -345 || rotatedX > 415 || rotatedY < -90 || rotatedY > 90) {\r\n                return false; // Outside ship boundaries\r\n            }\r\n        }\r\n        \r\n        // Check obstacles - masts\r\n        for (const mast of Ship.MASTS) {\r\n            const dx = rotatedX - mast.x;\r\n            const dy = rotatedY - mast.y;\r\n            if (dx * dx + dy * dy < mast.r * mast.r) {\r\n                return false; // Inside mast obstacle\r\n            }\r\n        }\r\n        \r\n        // Check obstacle - wheel\r\n        const wx = Ship.WHEEL.x, wy = Ship.WHEEL.y, ww = Ship.WHEEL.w, wh = Ship.WHEEL.h;\r\n        if (rotatedX > wx - ww/2 && rotatedX < wx + ww/2 && \r\n            rotatedY > wy - wh/2 && rotatedY < wy + wh/2) {\r\n            return false; // Inside wheel obstacle\r\n        }\r\n        \r\n        // Check obstacles - cannons\r\n        for (const cannon of Ship.CANNONS) {\r\n            if (rotatedX > cannon.x - cannon.w/2 && rotatedX < cannon.x + cannon.w/2 && \r\n                rotatedY > cannon.y - cannon.h/2 && rotatedY < cannon.y + cannon.h/2) {\r\n                return false; // Inside cannon obstacle\r\n            }\r\n        }\r\n        \r\n        // Check dynamic module obstacles\r\n        for (const [id, module] of this.modules.entries()) {\r\n            // Skip standard obstacles already checked above\r\n            if ((module.type === 'wheel' && module.position.x === Ship.WHEEL.x && module.position.y === Ship.WHEEL.y) ||\r\n                (module.type === 'cannon' && Ship.CANNONS.some(c => \r\n                    c.x === module.position.x && c.y === module.position.y))) {\r\n                continue;\r\n            }\r\n            \r\n            // Check against the module's position\r\n            const visualPos = this.getModuleVisualPosition(id);\r\n            const moduleSize = 20; // Default size for modules\r\n            \r\n            // Simple box collision check\r\n            if (rotatedX > visualPos.x - moduleSize/2 && rotatedX < visualPos.x + moduleSize/2 &&\r\n                rotatedY > visualPos.y - moduleSize/2 && rotatedY < visualPos.y + moduleSize/2) {\r\n                return false; // Inside module obstacle\r\n            }\r\n        }\r\n        \r\n        return true; // No obstacles found, position is walkable\r\n    }\r\n    \r\n    // Draw the ship using the provided context\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.save();\r\n        \r\n        // Center visuals on the unified center point\r\n        ctx.translate(this.position.x, this.position.y);\r\n        ctx.rotate(this.body.angle);\r\n        \r\n        // Create hull path if needed and draw it\r\n        if (!this.path) this.path = Ship.createHullPath();\r\n        \r\n        // Draw hull with wood texture effect\r\n        ctx.fillStyle = '#D2B48C';\r\n        ctx.strokeStyle = '#8B4513';\r\n        ctx.lineWidth = 10;\r\n        ctx.fill(this.path);\r\n        ctx.stroke(this.path);\r\n        \r\n        // Draw deck features in order\r\n        // Draw cannons\r\n        for (const cannon of Ship.CANNONS) {\r\n            // Pass rotation: 0 for bottom, Math.PI for top cannons\r\n            // This base rotation ensures cannons are oriented correctly (outward)\r\n            this.drawCannon(ctx, cannon.x, cannon.y, cannon.y > 0 ? 0 : Math.PI);\r\n        }\r\n        \r\n        // Draw masts and sails\r\n        for (const mast of Ship.MASTS) {\r\n            this.drawMastAndSail(ctx, mast.x, mast.y, this.getSailOpennessAt(mast.x, mast.y));\r\n        }\r\n        \r\n        // Draw wheel\r\n        this.drawSteeringWheel(ctx, Ship.WHEEL.x, Ship.WHEEL.y);\r\n        \r\n        // Restore context to original state\r\n        ctx.restore();\r\n    }\r\n    \r\n    // Placeholder for debug collision visualization\r\n    // @ts-ignore\r\n    drawDebugCollision(ctx: CanvasRenderingContext2D): void {\r\n        // Debug method removed to be reimplemented from scratch\r\n    }\r\n\r\n    /**\r\n     * Placeholder for debug collision box visualization\r\n     */\r\n    // @ts-ignore\r\n    drawDebugCollisionBox(ctx: CanvasRenderingContext2D): void {\r\n        // Debug method removed to be reimplemented from scratch\r\n    }\r\n    \r\n    // Helper method to draw a mast and sail at the specified position\r\n    private drawMastAndSail(ctx: CanvasRenderingContext2D, x: number, y: number, sailOpenness: number): void {\r\n        // Find the sail module for this position to get its angle\r\n        let sailAngle = 0;\r\n        \r\n        // Check specialized sails collection first\r\n        for (const [id, sail] of this.sails.entries()) {\r\n            // Get the visual position for comparison\r\n            const visualPos = this.getModuleVisualPosition(id);\r\n            \r\n            if (visualPos.x === x && visualPos.y === y) {\r\n                sailAngle = sail.angle;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        // Fallback to checking all modules for legacy support\r\n        if (sailAngle === 0) {\r\n            for (const [id, module] of this.modules.entries()) {\r\n                if (module instanceof SailModule) {\r\n                    // Already checked above\r\n                    continue;\r\n                }\r\n                \r\n                if (module.type === 'sail') {\r\n                    // Get the visual position for comparison\r\n                    const visualPos = this.getModuleVisualPosition(id);\r\n                    \r\n                    if (visualPos.x === x && visualPos.y === y) {\r\n                        // Type assert to ShipModule to access legacy properties\r\n                        const legacyModule = module as ShipModule;\r\n                        sailAngle = legacyModule.angle || 0;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        \r\n        // Draw mast\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, 15, 0, Math.PI * 2);\r\n        ctx.fillStyle = '#D2B48C';\r\n        ctx.strokeStyle = '#8B4513';\r\n        ctx.lineWidth = 4;\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        \r\n       \r\n        // Draw sail only if it's open\r\n        if (sailOpenness > 0) {\r\n            // Apply sail rotation based on sail angle\r\n            ctx.save();\r\n            ctx.rotate(sailAngle * Math.PI / 180);\r\n            \r\n            // Draw sail with openness affecting the curve\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, 130);\r\n            \r\n            // Adjust the curve based on sail openness\r\n            const curveAmount = 10 + sailOpenness * 90;\r\n            ctx.quadraticCurveTo(curveAmount, 0, 0, -130);\r\n            ctx.closePath();\r\n            \r\n            // Calculate sail efficiency based on wind and sail angle\r\n            let sailEfficiency = 0.35; // Minimum efficiency\r\n            const windDirection = this.currentWindDirection;\r\n            \r\n            // Calculate angle between wind and sail\r\n            const effectiveSailAngle = this.body.angle + (sailAngle * Math.PI / 180);\r\n            const sailNormalAngle = effectiveSailAngle + Math.PI/2;\r\n            const sailNormalX = Math.cos(sailNormalAngle);\r\n            const sailNormalY = Math.sin(sailNormalAngle);\r\n            const windDirX = Math.cos(windDirection);\r\n            const windDirY = Math.sin(windDirection);\r\n            const dotProduct = windDirX * sailNormalX + windDirY * sailNormalY;\r\n            const angleDiff = Math.acos(Math.min(1, Math.max(-1, dotProduct))) * 180 / Math.PI;\r\n            \r\n            // Calculate efficiency (1.0 at 0°, 0.35 at 90°)\r\n            if (angleDiff <= 90) {\r\n                sailEfficiency = 1.0 - (0.65 * angleDiff / 90);\r\n            }\r\n            \r\n            // Set sail color based on efficiency\r\n            const r = Math.floor(255 * (1 - sailEfficiency));\r\n            const g = Math.floor(255 * sailEfficiency);\r\n            const b = Math.floor(255 * 0.8);\r\n            const sailColor = `rgba(${r}, ${g}, ${b}, 0.8)`;\r\n            \r\n            const sailGradient = ctx.createLinearGradient(-curveAmount/2, 0, curveAmount/2, 0);\r\n            sailGradient.addColorStop(0, 'white');\r\n            sailGradient.addColorStop(0.5, sailColor);\r\n            sailGradient.addColorStop(1, 'white');\r\n            \r\n            ctx.fillStyle = sailGradient;\r\n            ctx.strokeStyle = '#000000';\r\n            ctx.lineWidth = 2;\r\n            ctx.fill();\r\n            ctx.stroke();\r\n            \r\n            // Draw curved sail fibers that follow the sail curve\r\n            ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\r\n            ctx.lineWidth = 1.5;\r\n            \r\n            // Draw nice curved sail fibers\r\n            for (let i = 1; i <= 4; i++) {\r\n                const t = i / 5; // Positions at 0.2, 0.4, 0.6, 0.8 of the sail height\r\n                ctx.beginPath();\r\n                const y1 = 130 - 260 * t; // Start point on the left edge\r\n                ctx.moveTo(0, y1);\r\n                \r\n                // Calculate control point that adjusts with the position in the sail\r\n                // Fibers at the center of the sail curve more than at the edges\r\n                const controlX = curveAmount * (1 - t * 0.5);\r\n                \r\n                // Draw a curved fiber that follows the sail's shape\r\n                ctx.quadraticCurveTo(controlX, 0, 0, -y1);\r\n                ctx.stroke();\r\n            }\r\n            \r\n            ctx.restore(); \r\n        }\r\n        \r\n        ctx.restore();\r\n    }\r\n    \r\n    // Helper method to draw the steering wheel\r\n    private drawSteeringWheel(ctx: CanvasRenderingContext2D, x: number, y: number): void {\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        \r\n        // Draw wheel base\r\n        const wheelPath = new Path2D();\r\n        wheelPath.moveTo(-10, -20);\r\n        wheelPath.lineTo(10, -20);\r\n        wheelPath.lineTo(10, 20);\r\n        wheelPath.lineTo(-10, 20);\r\n        wheelPath.closePath();\r\n\r\n        ctx.fillStyle = '#8B4513';\r\n        ctx.fill(wheelPath);\r\n        \r\n        // Draw wheel\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, 15, 0, Math.PI * 2);\r\n        ctx.fillStyle = '#654321';\r\n        ctx.fill();\r\n        \r\n        // Draw wheel spokes\r\n        // ctx.strokeStyle = '#432100';\r\n        // ctx.lineWidth = 2;\r\n        // for (let i = 0; i < 8; i++) {\r\n        //     const angle = (i / 8) * Math.PI * 2;\r\n        //     ctx.beginPath();\r\n        //     ctx.moveTo(-30, 0);\r\n        //     ctx.lineTo(-30 + Math.cos(angle) * 14, Math.sin(angle) * 14);\r\n        //     ctx.stroke();\r\n        // }\r\n        \r\n        ctx.restore();\r\n    }    // Helper method to draw a cannon\r\n    private drawCannon(ctx: CanvasRenderingContext2D, x: number, y: number, rotation: number): void {\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        ctx.rotate(rotation);\r\n        \r\n        // Find the cannon module for this position to get its turret angle\r\n        let turretAngle = 0;\r\n        \r\n        // Check specialized cannons collection first\r\n        for (const [id, cannon] of this.cannons.entries()) {\r\n            // Get the visual position for comparison\r\n            const visualPos = this.getModuleVisualPosition(id);\r\n            \r\n            if (visualPos.x === x && visualPos.y === y) {\r\n                turretAngle = cannon.turretAngle;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        // Fallback to checking all modules for legacy support\r\n        if (turretAngle === 0) {\r\n            for (const [id, module] of this.modules.entries()) {\r\n                if (module instanceof CannonModule) {\r\n                    // Already checked above\r\n                    continue;\r\n                }\r\n                \r\n                if (module.type === 'cannon') {\r\n                    // Get the visual position for comparison\r\n                    const visualPos = this.getModuleVisualPosition(id);\r\n                    \r\n                    if (visualPos.x === x && visualPos.y === y) {\r\n                        // Type assert to ShipModule to access legacy properties\r\n                        const legacyModule = module as ShipModule;\r\n                        turretAngle = legacyModule.turretAngle || 0;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Draw cannon base (doesn't rotate with turret)\r\n        ctx.fillStyle = '#8B4513';\r\n        ctx.strokeStyle = '#000000';\r\n        ctx.lineWidth = 2;\r\n        ctx.fillRect(-15, -10, 30, 20);\r\n        ctx.strokeRect(-15, -10, 30, 20);\r\n\r\n        // Draw cannon wheels\r\n        ctx.fillStyle = '#654321';\r\n        ctx.beginPath();\r\n        ctx.arc(-10, 10, 5, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        ctx.beginPath();\r\n        ctx.arc(10, 10, 5, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n        // Save context to apply turret rotation\r\n        ctx.save();\r\n        \r\n        // For the visual representation, rotate by turretAngle\r\n        ctx.rotate(turretAngle);\r\n        \r\n        // Draw cannon turret (barrel)\r\n        // Use 40 units length to match our firing calculation\r\n        ctx.fillStyle = '#333333';\r\n        ctx.beginPath();\r\n        ctx.moveTo(-8, 0);\r\n        ctx.lineTo(-8, -40);\r\n        ctx.lineTo(8, -40);\r\n        ctx.lineTo(8, 0);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        \r\n        // Restore context from turret rotation\r\n        ctx.restore();\r\n        \r\n        // Restore main context\r\n        ctx.restore();\r\n    }\r\n\r\n    // Visualize the walkable area of the ship with a grid of test points\r\n    testWalkableArea(ctx: CanvasRenderingContext2D, gridSize: number): void {\r\n        // Save context state\r\n        ctx.save();\r\n        \r\n        // Translate and rotate to match ship's position and orientation\r\n        ctx.translate(this.position.x, this.position.y);\r\n        ctx.rotate(this.body.angle);\r\n        \r\n        // Get ship dimensions for the test grid\r\n        const shipWidth = this.size.width * 1.1; // Extend a bit to ensure we cover the whole ship\r\n        const shipHeight = this.size.height * 1.1;\r\n        \r\n        // Create hull path if not already created\r\n        if (!this.path) {\r\n            this.path = Ship.createHullPath();\r\n        }\r\n        \r\n        // Draw a semi-transparent fill for the hull area\r\n        ctx.fillStyle = 'rgba(200, 200, 255, 0.15)';\r\n        ctx.fill(this.path);\r\n        \r\n        // Draw hull outline for reference\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\r\n        ctx.lineWidth = 3;\r\n        ctx.stroke(this.path);\r\n        \r\n        // Draw the rectangular physics boundary\r\n        ctx.strokeStyle = 'rgba(255, 255, 0, 0.4)';\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeRect(-this.size.width/2, -this.size.height/2, this.size.width, this.size.height);\r\n        \r\n        // Calculate bounds for the test grid\r\n        const halfWidth = shipWidth / 2;\r\n        const halfHeight = shipHeight / 2;\r\n        \r\n        // Use a finer grid for debugging with smaller dots\r\n        const testPointSize = Math.max(2, gridSize / 4);\r\n        \r\n        // Test grid of points to visualize walkable areas\r\n        for (let x = -halfWidth; x <= halfWidth; x += gridSize) {\r\n            for (let y = -halfHeight; y <= halfHeight; y += gridSize) {\r\n                // Get world coordinates for this test point (for checking walkability)\r\n                const worldX = this.position.x + x * Math.cos(this.body.angle) - y * Math.sin(this.body.angle);\r\n                const worldY = this.position.y + x * Math.sin(this.body.angle) + y * Math.cos(this.body.angle);\r\n                \r\n                // First check directly against the path to determine if inside hull\r\n                const insideHull = ctx.isPointInPath(this.path, x, y);\r\n                \r\n                // Then check against the walkable area function (includes obstacle checking)\r\n                const isWalkable = this.isPositionOnDeck(worldX, worldY, ctx);\r\n                \r\n                // Determine colors based on point status\r\n                if (isWalkable) {\r\n                    // Walkable area - use bright green with good visibility\r\n                    ctx.fillStyle = 'rgba(0, 220, 0, 0.85)';\r\n                } else if (insideHull) {\r\n                    // Inside hull but not walkable (obstacles) - use bright red\r\n                    ctx.fillStyle = 'rgba(255, 0, 0, 0.85)';\r\n                } else {\r\n                    // Outside ship's hull - use translucent blue\r\n                    // Use more translucent color to make the grid less distracting\r\n                    ctx.fillStyle = 'rgba(0, 0, 255, 0.05)';\r\n                }\r\n                \r\n                // Draw test point\r\n                ctx.beginPath();\r\n                ctx.arc(x, y, testPointSize, 0, Math.PI * 2);\r\n                ctx.fill();\r\n                \r\n                // Add a stroke for better visibility\r\n                if (isWalkable) {\r\n                    ctx.strokeStyle = 'rgba(0, 100, 0, 0.8)';\r\n                    ctx.lineWidth = 1;\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Draw the obstacles explicitly for clarity\r\n        \r\n        // Draw mast obstacle areas\r\n        ctx.fillStyle = 'rgba(139, 69, 19, 0.7)'; // Brown for masts\r\n        for (const mast of Ship.MASTS) {\r\n            ctx.beginPath();\r\n            ctx.arc(mast.x, mast.y, mast.r, 0, Math.PI * 2);\r\n            ctx.fill();\r\n            \r\n            // Label the mast\r\n            ctx.fillStyle = 'white';\r\n            ctx.font = '12px Arial';\r\n            ctx.fillText('Mast', mast.x - 15, mast.y);\r\n            ctx.fillStyle = 'rgba(139, 69, 19, 0.7)';\r\n        }\r\n        \r\n        // Draw wheel obstacle\r\n        const wx = Ship.WHEEL.x, wy = Ship.WHEEL.y, ww = Ship.WHEEL.w, wh = Ship.WHEEL.h;\r\n        ctx.fillStyle = 'rgba(255, 215, 0, 0.7)'; // Gold for wheel\r\n        ctx.fillRect(wx - ww/2, wy - wh/2, ww, wh);\r\n        \r\n        // Label the wheel\r\n        ctx.fillStyle = 'white';\r\n        ctx.font = '12px Arial';\r\n        ctx.fillText('Wheel', wx - 20, wy);\r\n        \r\n        // Draw cannon obstacles\r\n        ctx.fillStyle = 'rgba(169, 169, 169, 0.7)'; // Gray for cannons\r\n        for (const cannon of Ship.CANNONS) {\r\n            ctx.fillRect(\r\n                cannon.x - cannon.w/2, \r\n                cannon.y - cannon.h/2, \r\n                cannon.w, \r\n                cannon.h\r\n            );\r\n        }\r\n        \r\n        // Draw dynamic obstacles from modules (if any were added)\r\n        this.modules.forEach((module, id) => {\r\n            // Skip modules that match existing static obstacles\r\n            const isStaticObstacle = \r\n                (module.type === 'wheel' && module.position.x === Ship.WHEEL.x && module.position.y === Ship.WHEEL.y) ||\r\n                (module.type === 'cannon' && Ship.CANNONS.some(c => \r\n                    c.x === module.position.x && c.y === module.position.y));\r\n            \r\n            if (!isStaticObstacle) {\r\n                ctx.fillStyle = 'rgba(255, 0, 255, 0.7)'; // Purple for dynamic modules\r\n                const moduleSize = 20; // Default size for modules\r\n                \r\n                // Use the visual position for rendering\r\n                const visualPos = this.getModuleVisualPosition(id);\r\n                \r\n                ctx.fillRect(\r\n                    visualPos.x - moduleSize/2,\r\n                    visualPos.y - moduleSize/2,\r\n                    moduleSize,\r\n                    moduleSize\r\n                );\r\n                \r\n                // Label the module\r\n                ctx.fillStyle = 'white';\r\n                ctx.font = '10px Arial';\r\n                ctx.fillText(module.type, visualPos.x - 15, visualPos.y);\r\n            }\r\n        });\r\n        \r\n        ctx.restore();\r\n    }\r\n\r\n    // Find a safe position to dismount the player without getting stuck in obstacles\r\n    findSafeDismountPosition(startX: number, startY: number, ctx?: CanvasRenderingContext2D): { x: number, y: number } {\r\n        // First check if the starting position is already safe\r\n        if (this.isPositionOnDeck(startX, startY, ctx)) {\r\n            return { x: startX, y: startY };\r\n        }\r\n        \r\n        // Convert world start position to local ship coordinates\r\n        const localX = startX - this.position.x;\r\n        const localY = startY - this.position.y;\r\n        const cosA = Math.cos(-this.body.angle);\r\n        const sinA = Math.sin(-this.body.angle);\r\n        const rotatedX = localX * cosA - localY * sinA;\r\n        const rotatedY = localX * sinA + localY * cosA;\r\n        \r\n        // Define search parameters\r\n        const searchRadius = 60; // Radius to search for a safe position\r\n        const steps = 8; // Number of directions to check\r\n        const increments = 5; // Number of distance increments to check in each direction\r\n        \r\n        // Try positions in a radial pattern around the starting point\r\n        for (let inc = 1; inc <= increments; inc++) {\r\n            const stepDistance = (searchRadius * inc) / increments;\r\n            \r\n            for (let i = 0; i < steps; i++) {\r\n                const angle = (i / steps) * Math.PI * 2;\r\n                const testLocalX = rotatedX + Math.cos(angle) * stepDistance;\r\n                const testLocalY = rotatedY + Math.sin(angle) * stepDistance;\r\n                \r\n                // Convert back to world coordinates for testing\r\n                const testWorldX = this.position.x + testLocalX * Math.cos(this.body.angle) - testLocalY * Math.sin(this.body.angle);\r\n                const testWorldY = this.position.y + testLocalX * Math.sin(this.body.angle) + testLocalY * Math.cos(this.body.angle);\r\n                \r\n                // Check if this position is safe\r\n                if (this.isPositionOnDeck(testWorldX, testWorldY, ctx)) {\r\n                    return { x: testWorldX, y: testWorldY };\r\n                }\r\n            }\r\n        }\r\n        \r\n        // If we couldn't find a good position, use the center of the ship as a last resort\r\n        return { x: this.position.x, y: this.position.y };\r\n    }    // --- Helper to get sail openness at a mast position ---\r\n    private getSailOpennessAt(x: number, y: number): number {\r\n        // Check the specialized sails collection first for better performance\r\n        for (const [id, sail] of this.sails.entries()) {\r\n            // Get visual position to compare with the requested mast position\r\n            const visualPos = this.getModuleVisualPosition(id);\r\n            if (visualPos.x === x && visualPos.y === y) {\r\n                return sail.openness / 100;\r\n            }\r\n        }\r\n        \r\n        // Fallback to checking all modules (for backward compatibility)\r\n        for (const [id, module] of this.modules.entries()) {\r\n            if (module instanceof SailModule) {\r\n                // Already checked above in the specialized collection\r\n                continue;\r\n            }\r\n            \r\n            if (module.type === 'sail') {\r\n                // Get visual position to compare with the requested mast position\r\n                const visualPos = this.getModuleVisualPosition(id);\r\n                if (visualPos.x === x && visualPos.y === y) {\r\n                    // For legacy modules, openness would be undefined in BaseModule\r\n                    // so we need to type assert to access the property\r\n                    const legacyModule = module as ShipModule;\r\n                    return (legacyModule.openness || 0) / 100;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    // Destroy the ship and all its modules\r\n    destroy(): void {\r\n        // Clean up and notify all modules that the ship is being destroyed\r\n        \r\n        // First handle the specialized module collections\r\n        this.cannons.forEach(cannon => {\r\n            cannon.onDestroy();\r\n        });\r\n        this.sails.forEach(sail => {\r\n            sail.onDestroy();\r\n        });\r\n        this.wheels.forEach(wheel => {\r\n            wheel.onDestroy();\r\n        });\r\n        \r\n        // Then handle any remaining legacy modules\r\n        this.modules.forEach(module => {\r\n            if (module instanceof BaseModule) {\r\n                // Already processed above\r\n                return;\r\n            }\r\n            \r\n            // For legacy modules, call their update method which may have cleanup logic\r\n            module.update();\r\n        });\r\n        \r\n        // Clear all module collections\r\n        this.cannons.clear();\r\n        this.sails.clear();\r\n        this.wheels.clear();\r\n        this.modules.clear();\r\n        \r\n        // Clean up physics body if needed\r\n        if (this.body) {\r\n            // In a real implementation, we would tell the physics world to remove this body\r\n            // Assuming a method exists in the game to handle this\r\n            if (this.game && typeof this.game.removeBody === 'function') {\r\n                this.game.removeBody(this.body);\r\n            }\r\n        }\r\n        \r\n        // Set health to 0 to ensure the ship is marked as destroyed\r\n        this.health = 0;\r\n    }\r\n\r\n    // Toggle player between steering wheel and walking on deck\r\n    togglePlayerAtWheel(isAtWheel: boolean): void {\r\n        this.playerAtWheel = isAtWheel;\r\n    }\r\n    \r\n    // Set the player on board status\r\n    setPlayerOnBoard(isOnBoard: boolean, isAtWheel: boolean = false): void {\r\n        this.playerAtWheel = isAtWheel;\r\n        \r\n        // Modify collision filter for physics (if implemented)\r\n        if (isOnBoard) {\r\n            // Set ship to not collide with player when on board\r\n            Matter.Body.set(this.body, {\r\n                collisionFilter: {\r\n                    ...this.body.collisionFilter,\r\n                    group: -1 // Negative group means don't collide with same group\r\n                }\r\n            });\r\n        } else {\r\n            // Reset collision when player leaves\r\n            Matter.Body.set(this.body, {\r\n                collisionFilter: {\r\n                    ...this.body.collisionFilter,\r\n                    group: 0 // Reset to default group\r\n                }\r\n            });\r\n            \r\n            // Reset wheel status when player leaves ship completely\r\n            this.playerAtWheel = false;\r\n        }\r\n    }\r\n    \r\n    // Update the ship's position, rotation, and internal state\r\n    update(): void {\r\n        // Update the physics body position for the ship\r\n        // (This would include applying forces based on sails, rudder, etc.)\r\n        \r\n        // Apply drag to slow the ship based on sail openness\r\n        const dragFactor = 0.85; // Base drag (no sails open)\r\n        \r\n        Matter.Body.setVelocity(this.body, {\r\n            x: this.body.velocity.x * dragFactor,\r\n            y: this.body.velocity.y * dragFactor\r\n        });\r\n        \r\n        // Stop the ship completely if it's moving very slowly\r\n        if (Math.abs(this.body.velocity.x) < 0.005 && Math.abs(this.body.velocity.y) < 0.005) {\r\n            Matter.Body.setVelocity(this.body, { x: 0, y: 0 });\r\n            this.momentum = 0;\r\n        }\r\n        \r\n        // Update water level based on damage\r\n        this.updateWaterLevel();\r\n        \r\n        // Update all modules\r\n        this.updateModules();\r\n    }\r\n}\r\n\r\n","import Matter from 'matter-js';\n\nexport default class Enemy {\n    position: { x: number; y: number };\n    health: number;\n    speed: number;\n    aiBehavior: string;\n    body: Matter.Body;\n\n    constructor(x: number, y: number, health: number, speed: number, aiBehavior: string) {\n        this.position = { x, y };\n        this.health = health;\n        this.speed = speed;\n        this.aiBehavior = aiBehavior;\n        this.body = Matter.Bodies.circle(x, y, 15, {\n            label: 'enemy',\n            density: 0.002,\n            frictionAir: 0.05\n        });\n    }\n\n    moveTowards(targetX: number, targetY: number): void {\n        // Calculate direction towards target\n        const dx = targetX - this.position.x;\n        const dy = targetY - this.position.y;\n        \n        // Normalize the direction\n        const length = Math.sqrt(dx * dx + dy * dy);\n        if (length > 0) {\n            const normalizedDx = dx / length;\n            const normalizedDy = dy / length;\n            \n            // Move in the direction of the target\n            this.position.x += normalizedDx * this.speed;\n            this.position.y += normalizedDy * this.speed;\n            \n            // Update the physics body position\n            Matter.Body.setPosition(this.body, {\n                x: this.position.x,\n                y: this.position.y\n            });\n        }\n    }\n\n    attack() {\n        // Implement attack logic\n    }\n\n    takeDamage(amount: number) {\n        this.health -= amount;\n        if (this.health <= 0) {\n            this.die();\n        }\n    }\n\n    die() {\n        // Handle enemy death\n    }\n}","import Matter from 'matter-js';\n\ninterface Island {\n    position: { x: number, y: number };\n    size: { width: number, height: number };\n    body: Matter.Body;\n}\n\nexport default class WorldManager {\n    private engine: Matter.Engine;\n    private world: Matter.World;\n    private windDirection: number = 0; // In radians - represents the direction wind is blowing TOWARDS (vector convention)\n    private windPower: number = 1; // Wind strength\n    private islands: Island[] = [];\n    private boundaries: Matter.Body[] = [];\n    \n    constructor() {\n        this.engine = Matter.Engine.create();\n        this.world = this.engine.world;\n        this.setupWorld();\n    }\n\n    private setupWorld() {\n        // Setup initial world properties\n        this.setupBoundaries();\n        this.generateIslands(5); // Generate 5 random islands\n        this.setupWind();\n    }\n    \n    private setupBoundaries() {\n        // Create boundary walls to keep objects within the game area\n        const worldSize = 5000; // 5000x5000 world size\n        const wallThickness = 50;\n        \n        // Top boundary\n        const top = Matter.Bodies.rectangle(worldSize/2, -wallThickness/2, worldSize, wallThickness, { isStatic: true });\n        \n        // Bottom boundary\n        const bottom = Matter.Bodies.rectangle(worldSize/2, worldSize + wallThickness/2, worldSize, wallThickness, { isStatic: true });\n        \n        // Left boundary\n        const left = Matter.Bodies.rectangle(-wallThickness/2, worldSize/2, wallThickness, worldSize, { isStatic: true });\n        \n        // Right boundary\n        const right = Matter.Bodies.rectangle(worldSize + wallThickness/2, worldSize/2, wallThickness, worldSize, { isStatic: true });\n        \n        this.boundaries = [top, bottom, left, right];\n        Matter.World.add(this.world, this.boundaries);\n    }\n    \n    private generateIslands(count: number) {\n        const worldSize = 5000;\n        \n        for (let i = 0; i < count; i++) {\n            // Generate random island position and size\n            const size = {\n                width: 200 + Math.random() * 400,\n                height: 200 + Math.random() * 400\n            };\n            \n            const position = {\n                x: 500 + Math.random() * (worldSize - 1000), // Keep away from boundaries\n                y: 500 + Math.random() * (worldSize - 1000)\n            };\n            \n            // Create island body\n            const body = Matter.Bodies.rectangle(position.x, position.y, size.width, size.height, { \n                isStatic: true,\n                label: 'island'\n            });\n            \n            // Add island to the world\n            this.islands.push({ position, size, body });\n            Matter.World.add(this.world, body);\n        }\n    }\n    \n    // Time when the wind system was initialized\n    private windSystemStartTime: number = Date.now();\n    \n    private setupWind() {\n        // Initialize wind with a random direction\n        this.windDirection = Math.random() * Math.PI * 2;\n        this.windPower = 1.0; // Start with moderate wind power\n        this.windSystemStartTime = Date.now();\n    }\n    \n    public updateWind() {\n        // Calculate time since the wind system started, in milliseconds\n        const currentTime = Date.now();\n        const elapsedTime = currentTime - this.windSystemStartTime;\n        \n        // Full cycle is 5 minutes (300000 ms)\n        const cycleDuration = 5 * 60 * 1000; \n        \n        // Calculate position in the cycle as a value from 0 to 1\n        const cyclePosition = (elapsedTime % cycleDuration) / cycleDuration;\n        \n        // Set wind direction to rotate clockwise (2π radians per cycle)\n        this.windDirection = cyclePosition * Math.PI * 2;\n        \n        // Keep wind direction in the range [0, 2π]\n        while (this.windDirection < 0) this.windDirection += Math.PI * 2;\n        while (this.windDirection >= Math.PI * 2) this.windDirection -= Math.PI * 2;\n        \n        // Determine wind power based on direction\n        // Strong winds when blowing north-south (0, π, or 2π radians)\n        // Weak winds when blowing east-west (π/2 or 3π/2 radians)\n        \n        // Calculate how close we are to the north-south axis\n        const northSouthAxis = Math.min(\n            Math.abs(this.windDirection % Math.PI), // Distance to 0 or π\n            Math.abs((this.windDirection - Math.PI) % Math.PI) // Distance to π or 2π\n        );\n        \n        // Normalize to 0-1, where 1 is perfect North-South alignment\n        const northSouthAlignment = 1 - (northSouthAxis / (Math.PI / 2));\n        \n        // Set minimum wind power to 75% of maximum (2.0), which is 1.5\n        const minWindPower = 1.5;\n        \n        // Scale wind power from minWindPower to 2.0 based on alignment\n        this.windPower = minWindPower + northSouthAlignment * (2.0 - minWindPower);\n        \n        // Add a small random variation to make it less mechanical\n        this.windPower += (Math.random() - 0.5) * 0.1;\n        \n        // Clamp wind power to reasonable values\n        if (this.windPower < 1.5) this.windPower = 1.5; // 75% of maximum\n        if (this.windPower > 2.0) this.windPower = 2.0;\n    }\n    \n    public getWindDirection(): number {\n        return this.windDirection;\n    }\n    \n    public getWindPower(): number {\n        return this.windPower;\n    }\n\n    public update() {\n        Matter.Engine.update(this.engine);\n        this.updateWind();\n    }\n\n    public addEntity(entity: Matter.Body) {\n        Matter.World.add(this.world, entity);\n    }\n\n    public removeEntity(entity: Matter.Body) {\n        Matter.World.remove(this.world, entity);\n    }\n    \n    public getEngine(): Matter.Engine {\n        return this.engine;\n    }\n    \n    public getIslands(): Island[] {\n        return this.islands;\n    }\n}","import Matter from 'matter-js';\r\n\r\nexport default class Cannonball {\r\n    position: { x: number; y: number };\r\n    velocity: { x: number; y: number };\r\n    angle: number;\r\n    radius: number;\r\n    body: Matter.Body;\r\n    lifetime: number; // How long the cannonball exists (in frames)\r\n    maxLifetime: number;\r\n    damage: number;\r\n    \r\n    constructor(x: number, y: number, angle: number, speed: number = 10) {\r\n        this.position = { x, y };\r\n        this.angle = angle;\r\n        this.radius = 5;\r\n        this.damage = 10;\r\n        \r\n        // Calculate velocity components\r\n        this.velocity = {\r\n            x: Math.cos(angle) * speed,\r\n            y: Math.sin(angle) * speed\r\n        };\r\n        \r\n        // Create physics body\r\n        this.body = Matter.Bodies.circle(x, y, this.radius, {\r\n            label: 'cannonball',\r\n            frictionAir: 0.001,\r\n            friction: 0.1,\r\n            restitution: 0.6,\r\n            density: 0.1,\r\n            // Make cannonballs non-colliding with the ship that fired them\r\n            collisionFilter: {\r\n                category: 0x0008, // Cannonball category\r\n                mask: 0x0007 // Collide with everything except the firing ship\r\n            }\r\n        });\r\n        \r\n        // Set initial velocity\r\n        Matter.Body.setVelocity(this.body, this.velocity);\r\n        \r\n        // Set lifetime\r\n        this.lifetime = 0;\r\n        this.maxLifetime = 180; // 3 seconds at 60fps\r\n    }\r\n    \r\n    update(): boolean {\r\n        // Update position based on physics body\r\n        this.position.x = this.body.position.x;\r\n        this.position.y = this.body.position.y;\r\n        \r\n        // Update lifetime\r\n        this.lifetime++;\r\n        \r\n        // Return true if cannonball is still alive, false if it should be removed\r\n        return this.lifetime < this.maxLifetime;\r\n    }\r\n    \r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.save();\r\n        \r\n        // Draw cannonball\r\n        ctx.fillStyle = '#333333';\r\n        ctx.beginPath();\r\n        ctx.arc(this.position.x, this.position.y, this.radius, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n        // Draw shadow\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n        ctx.beginPath();\r\n        ctx.arc(this.position.x + 2, this.position.y + 2, this.radius, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n        ctx.restore();\r\n    }\r\n    \r\n    // Handle collision with other objects\r\n    handleCollision(other: any): void {\r\n        // If the other object is a ship or enemy, apply damage\r\n        if (other.health !== undefined) {\r\n            other.takeDamage(this.damage);\r\n        }\r\n    }\r\n}","// This file exports a class Game that manages the overall game state, including starting, updating, and rendering the game.\r\n// Fixed ship collision box alignment: The visual representation now matches the physics body with a 100px X-offset\r\n// Press 'G' to toggle walkable area test visualization and 'L' for debug info\r\n\r\nimport Matter, { Engine, World } from 'matter-js';\r\nimport Player from './Player';\r\nimport Ship, { ShipModule } from './Ship';\r\nimport Enemy from './Enemy';\r\nimport WorldManager from './World';\r\nimport Cannonball from './Cannonball';\r\nimport { CannonModule, SailModule } from './modules';\r\n\r\nexport class Game {\r\n    private engine: Engine;\r\n    private player: Player;\r\n    private ship: Ship;\r\n    private enemies: Enemy[] = [];\r\n    private world: WorldManager;\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private keysPressed: Set<string> = new Set();\r\n    private playerOnShip: boolean = false;\r\n    private mousePosition: { x: number, y: number } = { x: 0, y: 0 };\r\n    private screenMousePosition: { x: number, y: number } = { x: 0, y: 0 };\r\n    private cannonballs: Cannonball[] = []; // Array to store active cannonballs\r\n    \r\n    // Debug mode flags\r\n    private debugMode: boolean = false;\r\n    private showWalkableTest: boolean = false;\r\n    \r\n    // Camera/viewport settings\r\n    private viewport = {\r\n        x: 0,\r\n        y: 0,\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        scale: 1\r\n    };\r\n\r\n    constructor(engine: Engine) {\r\n        this.engine = engine;\r\n        this.canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        \r\n        // Initialize debug mode\r\n        this.debugMode = false;\r\n        \r\n        // Update viewport dimensions based on canvas size\r\n        this.viewport.width = this.canvas.width;\r\n        this.viewport.height = this.canvas.height;\r\n\r\n        // Initialize world before creating entities\r\n        this.world = new WorldManager();\r\n        \r\n        // Initialize player\r\n        this.player = new Player(400, 300);\r\n        this.player.setOnShip(this.playerOnShip); // Sync the onShip property with Game's state\r\n          // Initialize ship with brigantine dimensions\r\n        this.ship = new Ship(400, 350, 450, 180, 1);\r\n        \r\n        // Connect ship with game for cannonball creation\r\n        this.ship.setGame(this);\r\n        \r\n        // Add ship modules\r\n        this.addInitialShipModules();\r\n        \r\n        // Set up input handlers\r\n        this.setupInputHandlers();\r\n    }\r\n\r\n    // Update viewport dimensions when window is resized\r\n    public updateViewportDimensions(width: number, height: number): void {\r\n        this.viewport.width = width;\r\n        this.viewport.height = height;\r\n    }\r\n\r\n    // Set up initial ship configuration with basic modules\r\n    private addInitialShipModules(): void {\r\n        // These modules would be properly implemented with their own classes\r\n        // For now we'll just stub them out\r\n        this.ship.addModule('wheel', {\r\n            type: 'wheel',\r\n            position: { x: -50, y: 0 },  // Position matches the steering wheel drawing position\r\n            rotation: 0,\r\n            health: 100,\r\n            update() {},\r\n            use() {} // Removed console.log\r\n        });\r\n        \r\n        // Front sail (sail1)\r\n        this.ship.addModule('sail1', {\r\n            type: 'sail',\r\n            position: { x: 165, y: 0 }, // Aligned with Ship.MASTS[0]\r\n            rotation: 0,\r\n            health: 100,\r\n            openness: 0, // Start with sail closed\r\n            angle: 0,    // Start with centered sail angle\r\n            update() {},\r\n            use() {} // Removed console.log\r\n        });\r\n        \r\n        // Middle sail (sail2)\r\n        this.ship.addModule('sail2', {\r\n            type: 'sail',\r\n            position: { x: -35, y: 0 }, // Aligned with Ship.MASTS[1]\r\n            rotation: 0,\r\n            health: 100,\r\n            openness: 0, // Start with sail closed\r\n            angle: 0,    // Start with centered sail angle\r\n            update() {},\r\n            use() {} // Removed console.log\r\n        });\r\n        \r\n        // Back sail (sail3)\r\n        this.ship.addModule('sail3', {\r\n            type: 'sail',\r\n            position: { x: -235, y: 0 }, // Aligned with Ship.MASTS[2]\r\n            rotation: 0,\r\n            health: 100,\r\n            openness: 0, // Start with sail closed\r\n            angle: 0,    // Start with centered sail angle\r\n            update() {},\r\n            use() {} // Removed console.log\r\n        });\r\n          // Bottom cannons\r\n        this.ship.addModule('cannon1', {\r\n            type: 'cannon',\r\n            position: { x: -35, y: 75 }, // Aligned with Ship.CANNONS[0]\r\n            rotation: 0, // Changed from Math.PI to 0 (flipped 180 degrees)\r\n            health: 100,\r\n            update() {},\r\n            use() {} // Removed console.log\r\n        });\r\n        \r\n        this.ship.addModule('cannon2', {\r\n            type: 'cannon',\r\n            position: { x: 65, y: 75 }, // Aligned with Ship.CANNONS[1]\r\n            rotation: 0, // Changed from Math.PI to 0 (flipped 180 degrees)\r\n            health: 100,\r\n            update() {},\r\n            use() {} // Removed console.log\r\n        });\r\n        \r\n        this.ship.addModule('cannon3', {\r\n            type: 'cannon',\r\n            position: { x: -135, y: 75 }, // Aligned with Ship.CANNONS[2]\r\n            rotation: 0, // Changed from Math.PI to 0 (flipped 180 degrees)\r\n            health: 100,\r\n            update() {},\r\n            use() {} // Removed console.log\r\n        });        \r\n        // Top cannons\r\n        this.ship.addModule('cannon4', {\r\n            type: 'cannon',\r\n            position: { x: -35, y: -75 }, // Aligned with Ship.CANNONS[3]\r\n            rotation: Math.PI, // Changed from 0 to Math.PI (flipped 180 degrees)\r\n            health: 100,\r\n            update() {},\r\n            use() {} // Removed console.log\r\n        });\r\n        \r\n        this.ship.addModule('cannon5', {\r\n            type: 'cannon',\r\n            position: { x: 65, y: -75 }, // Aligned with Ship.CANNONS[4]\r\n            rotation: Math.PI, // Changed from 0 to Math.PI (flipped 180 degrees)\r\n            health: 100,\r\n            update() {},\r\n            use() {} // Removed console.log\r\n        });\r\n        \r\n        this.ship.addModule('cannon6', {\r\n            type: 'cannon',\r\n            position: { x: -135, y: -75 }, // Aligned with Ship.CANNONS[5]\r\n            rotation: Math.PI, // Changed from 0 to Math.PI (flipped 180 degrees)\r\n            health: 100,\r\n            update() {},\r\n            use() {} // Removed console.log\r\n        });\r\n    }\r\n    \r\n    // Set up keyboard and mouse input handlers\r\n    private setupInputHandlers(): void {\r\n        // Keyboard controls\r\n        document.addEventListener('keydown', (e) => {\r\n            this.keysPressed.add(e.key.toLowerCase());\r\n        });\r\n        \r\n        document.addEventListener('keyup', (e) => {\r\n            this.keysPressed.delete(e.key.toLowerCase());\r\n        });\r\n        \r\n        // Mouse position tracking\r\n        this.canvas.addEventListener('mousemove', (e) => {\r\n            // Get the mouse position relative to the canvas\r\n            const rect = this.canvas.getBoundingClientRect();\r\n            const mouseX = e.clientX - rect.left;\r\n            const mouseY = e.clientY - rect.top;\r\n            \r\n            // Store raw screen coordinates\r\n            this.screenMousePosition = { x: mouseX, y: mouseY };\r\n            \r\n            // Convert screen coordinates to world coordinates\r\n            this.mousePosition = this.screenToWorldCoordinates(mouseX, mouseY);\r\n            \r\n            // Update cannon turret angles when player is on ship\r\n            if (this.playerOnShip) {\r\n                this.updateCannonAiming();\r\n            }\r\n        });\r\n\r\n        // Mouse button handlers for cannon control\r\n        this.canvas.addEventListener('mousedown', (e) => {\r\n            // Check if player is on ship\r\n            if (this.playerOnShip) {\r\n                if (e.button === 0) {\r\n                    // Left mouse button - fire cannons\r\n                    this.ship.fireCannon(this.mousePosition);\r\n                    e.preventDefault();\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Right click context menu event for aiming\r\n        this.canvas.addEventListener('contextmenu', (e) => {\r\n            // Prevent the context menu from appearing\r\n            e.preventDefault();\r\n            \r\n            // Only handle right-click when player is on ship\r\n            if (this.playerOnShip) {\r\n                // Right mouse button - update turret angles\r\n                this.updateCannonAiming();\r\n            }\r\n        });\r\n        \r\n        // Mouse wheel for zooming\r\n        this.canvas.addEventListener('wheel', (e) => {\r\n            e.preventDefault(); // Prevent page scrolling\r\n            \r\n            // Calculate zoom factor based on wheel delta\r\n            const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1; // Zoom out (0.9) or in (1.1)\r\n            \r\n            // Apply zoom with constraints (min 0.5, max 2.0)\r\n            const newScale = Math.max(0.5, Math.min(2.0, this.viewport.scale * zoomFactor));\r\n            \r\n            // Only update if the scale actually changed\r\n            if (newScale !== this.viewport.scale) {\r\n                // Update the scale\r\n                this.viewport.scale = newScale;\r\n                \r\n                // Update mouse world position with new scale\r\n                this.mousePosition = this.screenToWorldCoordinates(\r\n                    this.screenMousePosition.x, \r\n                    this.screenMousePosition.y\r\n                );\r\n            }\r\n        }, { passive: false }); // 'passive: false' is needed to use preventDefault\r\n        \r\n        // Ship boarding and wheel controls\r\n        document.addEventListener('keypress', (e) => {\r\n            if (e.key.toLowerCase() === 'f') { // 'F' to board/exit ship\r\n                this.togglePlayerOnShip();\r\n            }\r\n            else if (e.key.toLowerCase() === 'e') { // 'E' to mount/dismount wheel when on ship\r\n                this.togglePlayerAtWheel();\r\n            }\r\n            else if (e.key.toLowerCase() === 'l') { // 'L' to toggle debug collision shapes\r\n                this.debugMode = !this.debugMode;\r\n                // Debug message removed\r\n            }\r\n            else if (e.key.toLowerCase() === 'g') { // 'G' to toggle the walkable area test grid\r\n                this.showWalkableTest = !this.showWalkableTest;\r\n                // Debug message removed\r\n            }\r\n        });\r\n    }\r\n\r\n    // Convert screen coordinates to world coordinates, accounting for scale\r\n    private screenToWorldCoordinates(screenX: number, screenY: number): { x: number, y: number } {\r\n        // Calculate position based on camera center, scale, and screen position\r\n        return {\r\n            x: this.viewport.x + (screenX - this.viewport.width/2) / this.viewport.scale,\r\n            y: this.viewport.y + (screenY - this.viewport.height/2) / this.viewport.scale\r\n        };\r\n    }\r\n\r\n    // Convert world coordinates to ship-local coordinates\r\n    private worldToShipCoordinates(worldX: number, worldY: number): { x: number, y: number } {\r\n        // Calculate position relative to ship center\r\n        const dx = worldX - this.ship.position.x;\r\n        const dy = worldY - this.ship.position.y;\r\n        \r\n        // Transform to ship's local coordinates (accounting for rotation)\r\n        const shipAngle = -this.ship.body.angle; // Negative for inverse transformation\r\n        const localX = dx * Math.cos(shipAngle) - dy * Math.sin(shipAngle);\r\n        const localY = dx * Math.sin(shipAngle) + dy * Math.cos(shipAngle);\r\n        \r\n        return { x: localX, y: localY };\r\n    }\r\n    \r\n    // Convert ship-local coordinates to world coordinates\r\n    private shipToWorldCoordinates(localX: number, localY: number): { x: number, y: number } {\r\n        // Transform back to world coordinates with ship's position and rotation\r\n        const shipAngle = this.ship.body.angle;\r\n        const worldX = this.ship.position.x + \r\n            localX * Math.cos(shipAngle) - localY * Math.sin(shipAngle);\r\n        const worldY = this.ship.position.y + \r\n            localX * Math.sin(shipAngle) + localY * Math.cos(shipAngle);\r\n            \r\n        return { x: worldX, y: worldY };\r\n    }\r\n\r\n    // Toggle player between on ship and off ship\r\n    private togglePlayerOnShip(): void {\r\n        // Check if player is close enough to the ship to board\r\n        const dx = this.player.position.x - this.ship.position.x;\r\n        const dy = this.player.position.y - this.ship.position.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        // If player is already on the ship, check if they're at the wheel\r\n        if (this.playerOnShip) {\r\n            // Player wants to leave the ship completely\r\n            this.playerOnShip = false;\r\n            \r\n            // Update player and ship states\r\n            this.player.setOnShip(false, false);\r\n            this.ship.setPlayerOnBoard(false, false);\r\n            \r\n            // Calculate a safe dismount position outside the ship\r\n            // First, get player's current position\r\n            const playerLocalPos = this.worldToShipCoordinates(\r\n                this.player.position.x,\r\n                this.player.position.y\r\n            );\r\n            \r\n            // Find a direction vector pointing outward from the ship's center\r\n            // Normalize the local player position to get a direction vector\r\n            const length = Math.sqrt(playerLocalPos.x * playerLocalPos.x + playerLocalPos.y * playerLocalPos.y);\r\n            // If player is at center, use a default direction\r\n            const dirX = length > 0 ? playerLocalPos.x / length : 1;\r\n            const dirY = length > 0 ? playerLocalPos.y / length : 0;\r\n            \r\n            // Calculate a position outside the ship\r\n            // Use 1.5x the ship's width/height to ensure we're outside\r\n            const shipWidth = this.ship.size.width;\r\n            const shipHeight = this.ship.size.height;\r\n            const outsideDistance = Math.max(shipWidth, shipHeight) * 0.75;\r\n            \r\n            // Calculate dismount position in world coordinates\r\n            const dismountX = this.ship.position.x + dirX * outsideDistance;\r\n            const dismountY = this.ship.position.y + dirY * outsideDistance;\r\n            \r\n            // Update player position to the safe dismount position\r\n            this.player.position.x = dismountX;\r\n            this.player.position.y = dismountY;\r\n            \r\n            // Update player physics body position\r\n            Matter.Body.setPosition(this.player.body, {\r\n                x: dismountX,\r\n                y: dismountY\r\n            });\r\n            \r\n            // Reset collision filters when leaving ship\r\n            Matter.Body.set(this.player.body, {\r\n                collisionFilter: {\r\n                    ...this.player.body.collisionFilter,\r\n                    group: 0  // Reset to default group\r\n                }\r\n            });\r\n            \r\n            // Player left ship message removed\r\n            return;\r\n        }\r\n        \r\n        // Player is not on ship, check if they're close enough to board\r\n        if (distance < 200) {\r\n            this.playerOnShip = true;\r\n            \r\n            // Player boards the ship but is not at the wheel initially\r\n            this.player.setOnShip(true, false);\r\n            this.ship.setPlayerOnBoard(true, false);\r\n            \r\n            // Calculate a valid boarding position on the deck\r\n            // Calculate normalized direction vector from ship to player\r\n            const dirX = dx / distance;\r\n            const dirY = dy / distance;\r\n            \r\n            // Calculate a boarding position just inside the ship's edge\r\n            const shipWidth = this.ship.size.width;\r\n            const shipHeight = this.ship.size.height;\r\n            const boardingX = this.ship.position.x + dirX * (shipWidth/2 * 0.8);\r\n            const boardingY = this.ship.position.y + dirY * (shipHeight/2 * 0.8);\r\n            \r\n            // Find a safe boarding position that avoids obstacles\r\n            const safePosition = this.ship.findSafeDismountPosition(boardingX, boardingY);\r\n            \r\n            // Use the safe boarding position\r\n            this.player.position.x = safePosition.x;\r\n            this.player.position.y = safePosition.y;\r\n            \r\n            // Update player physics body position\r\n            Matter.Body.setPosition(this.player.body, {\r\n                x: this.player.position.x,\r\n                y: this.player.position.y\r\n            });\r\n            \r\n            // Set player and ship to be in the same collision group\r\n            Matter.Body.set(this.player.body, {\r\n                collisionFilter: {\r\n                    ...this.player.body.collisionFilter,\r\n                    group: -1  // Negative group means no collision within the group\r\n                }\r\n            });\r\n            \r\n            // Player boarded ship message removed\r\n        }\r\n    }\r\n    \r\n    // Toggle player between steering the ship and walking on deck\r\n    private togglePlayerAtWheel(): void {\r\n        if (!this.playerOnShip) return; // Only works when on ship\r\n        \r\n        // Calculate distance to steering wheel\r\n        const wheelX = this.ship.position.x - 90; // Wheel is at -90,0 relative to ship center\r\n        const wheelY = this.ship.position.y;\r\n        const dx = this.player.position.x - wheelX;\r\n        const dy = this.player.position.y - wheelY;\r\n        const distanceToWheel = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        const isAtWheel = this.player.atShipWheel;\r\n        \r\n        if (isAtWheel) {\r\n            // Player is leaving the wheel\r\n            this.player.setAtShipWheel(false);\r\n            this.ship.togglePlayerAtWheel(false);\r\n            // Player left wheel message removed\r\n            \r\n            // Already at a valid position, so no need to move\r\n        } else if (distanceToWheel < 50) {\r\n            // Player is close enough to the wheel to mount it\r\n            this.player.setAtShipWheel(true);\r\n            this.ship.togglePlayerAtWheel(true);\r\n            \r\n            // Move player exactly to the wheel position\r\n            this.player.position.x = wheelX;\r\n            this.player.position.y = wheelY;\r\n            \r\n            // Update player physics body position\r\n            Matter.Body.setPosition(this.player.body, {\r\n                x: this.player.position.x,\r\n                y: this.player.position.y\r\n            });\r\n            \r\n            // Player at wheel message removed\r\n        } else {\r\n            // Too far from wheel message removed\r\n        }\r\n    }\r\n    \r\n    public start(): void {\r\n        // Add entities to the world\r\n        this.setupWorld();\r\n        \r\n        // Start the physics engine\r\n        // Use Runner instead of deprecated Engine.run\r\n        const runner = Matter.Runner.create();\r\n        Matter.Runner.run(runner, this.engine);\r\n        \r\n        // Start the game loop\r\n        this.gameLoop();\r\n    }\r\n\r\n    private setupWorld(): void {\r\n        // Define collision categories\r\n        const defaultCategory = 0x0001;\r\n        const playerCategory = 0x0002;\r\n        const shipCategory = 0x0004;\r\n        \r\n        // Set collision filters for the player\r\n        Matter.Body.set(this.player.body, {\r\n            collisionFilter: {\r\n                category: playerCategory,\r\n                mask: defaultCategory // Player only collides with default category by default\r\n            }\r\n        });\r\n        \r\n        // Set collision filters for the ship\r\n        Matter.Body.set(this.ship.body, {\r\n            collisionFilter: {\r\n                category: shipCategory,\r\n                mask: defaultCategory | playerCategory // Ship collides with default and player categories\r\n            }\r\n        });\r\n        \r\n        // Add entities to the physics world\r\n        World.add(this.engine.world, [this.player.body, this.ship.body]);\r\n        \r\n        // Add a few enemy ships\r\n        this.spawnEnemies(3);\r\n    }\r\n\r\n    private spawnEnemies(count: number): void {\r\n        for (let i = 0; i < count; i++) {\r\n            const x = 500 + Math.random() * 1000;\r\n            const y = 500 + Math.random() * 1000;\r\n            const enemy = new Enemy(x, y, 100, 0.5, 'aggressive');\r\n            \r\n            this.enemies.push(enemy);\r\n            World.add(this.engine.world, enemy.body);\r\n        }\r\n    }\r\n    \r\n    // Handle player movement based on keyboard input\r\n    private handlePlayerMovement(): void {\r\n        const moveSpeed = 5;\r\n        \r\n        if (this.playerOnShip) {\r\n            // Player is on the ship - check if at wheel or walking\r\n            if (this.player.atShipWheel) {\r\n                // Player is controlling the ship from the wheel\r\n                \r\n                // WASD controls for ship steering:\r\n                // W/S - Control sail openness\r\n                // A/D - Control rudder (turning)\r\n                // Shift+A/D - Rotate sails\r\n                \r\n                // Sail openness controls (W/S)\r\n                if (this.keysPressed.has('w') && !this.keysPressed.has('s')) {\r\n                    // Open sails with W\r\n                    this.ship.openSails();\r\n                    // Remove W from pressed keys to prevent continuous adjustment\r\n                    this.keysPressed.delete('w');\r\n                } \r\n                else if (this.keysPressed.has('s') && !this.keysPressed.has('w')) {\r\n                    // Close sails with S\r\n                    this.ship.closeSails();\r\n                    // Remove S from pressed keys to prevent continuous adjustment\r\n                    this.keysPressed.delete('s');\r\n                }\r\n                \r\n                // Rudder controls (A/D)\r\n                if (this.keysPressed.has('a') && !this.keysPressed.has('d') && !this.keysPressed.has('shift')) {\r\n                    // Turn left with A\r\n                    this.ship.applyRudder('left');\r\n                } \r\n                else if (this.keysPressed.has('d') && !this.keysPressed.has('a') && !this.keysPressed.has('shift')) {\r\n                    // Turn right with D\r\n                    this.ship.applyRudder('right');\r\n                }\r\n                else if (!this.keysPressed.has('a') && !this.keysPressed.has('d')) {\r\n                    // Return rudder to center position when no keys are pressed\r\n                    this.ship.applyRudder('center');\r\n                }\r\n                \r\n                // Sail rotation controls (Shift+A/D)\r\n                if (this.keysPressed.has('shift')) {\r\n                    if (this.keysPressed.has('a') && !this.keysPressed.has('d')) {\r\n                        // Rotate sails left with Shift+A\r\n                        this.ship.rotateSails('left');\r\n                        // Don't remove keys as we want continuous adjustment while held\r\n                    } \r\n                    else if (this.keysPressed.has('d') && !this.keysPressed.has('a')) {\r\n                        // Rotate sails right with Shift+D\r\n                        this.ship.rotateSails('right');\r\n                    }\r\n                    // Removed automatic centering - sails will stay in place when keys are released\r\n                }\r\n                \r\n                // Calculate the helm position at the steering wheel\r\n                // Transform from ship-local coordinates to world coordinates\r\n                const wheelCoords = this.shipToWorldCoordinates(-90, 0);\r\n                const helmPositionX = wheelCoords.x;\r\n                const helmPositionY = wheelCoords.y;\r\n                \r\n                // Update player position to stay fixed at the wheel position\r\n                this.player.position.x = helmPositionX;\r\n                this.player.position.y = helmPositionY;\r\n                \r\n                // Update player physics body position\r\n                Matter.Body.setPosition(this.player.body, {\r\n                    x: helmPositionX,\r\n                    y: helmPositionY\r\n                });\r\n                \r\n                // Keep player and ship in sync with velocity\r\n                Matter.Body.setVelocity(this.player.body, {\r\n                    x: this.ship.body.velocity.x,\r\n                    y: this.ship.body.velocity.y\r\n                });\r\n                \r\n                // Ensure player body is a sensor (non-colliding) when at wheel\r\n                if (!this.player.body.isSensor) {\r\n                    Matter.Body.set(this.player.body, 'isSensor', true);\r\n                }\r\n            } else {\r\n                // Player is walking on the ship's deck\r\n                // Calculate angle between player and mouse for movement direction\r\n                const dx = this.mousePosition.x - this.player.position.x;\r\n                const dy = this.mousePosition.y - this.player.position.y;\r\n                const angle = Math.atan2(dy, dx);\r\n                \r\n                // Calculate movement vectors based on keyboard input\r\n                let moveX = 0;\r\n                let moveY = 0;\r\n                \r\n                // W = forward toward mouse\r\n                if (this.keysPressed.has('w')) {\r\n                    moveX += Math.cos(angle) * moveSpeed;\r\n                    moveY += Math.sin(angle) * moveSpeed;\r\n                }\r\n                \r\n                // S = backward away from mouse\r\n                if (this.keysPressed.has('s')) {\r\n                    moveX -= Math.cos(angle) * moveSpeed;\r\n                    moveY -= Math.sin(angle) * moveSpeed;\r\n                }\r\n                \r\n                // A = strafe left (perpendicular to mouse direction)\r\n                if (this.keysPressed.has('a')) {\r\n                    moveX += Math.cos(angle - Math.PI/2) * moveSpeed;\r\n                    moveY += Math.sin(angle - Math.PI/2) * moveSpeed;\r\n                }\r\n                \r\n                // D = strafe right (perpendicular to mouse direction)\r\n                if (this.keysPressed.has('d')) {\r\n                    moveX += Math.cos(angle + Math.PI/2) * moveSpeed;\r\n                    moveY += Math.sin(angle + Math.PI/2) * moveSpeed;\r\n                }\r\n                \r\n                if (moveX !== 0 || moveY !== 0) {\r\n                    // Apply movement in world coordinates\r\n                    const newPosX = this.player.position.x + moveX;\r\n                    const newPosY = this.player.position.y + moveY;\r\n                    \r\n                    // First check if new position is on the ship's deck\r\n                    if (this.ship.isPositionOnDeck(newPosX, newPosY)) {\r\n                        // Position is valid, update player position\r\n                        this.player.position.x = newPosX;\r\n                        this.player.position.y = newPosY;\r\n                        \r\n                        // Update player physics body\r\n                        Matter.Body.setPosition(this.player.body, {\r\n                            x: newPosX,\r\n                            y: newPosY\r\n                        });\r\n                    } else {\r\n                        // If not valid, try to slide along the ship's edge\r\n                        // First try X movement only\r\n                        const newPosXOnly = {\r\n                            x: this.player.position.x + moveX,\r\n                            y: this.player.position.y\r\n                        };\r\n                        \r\n                        if (this.ship.isPositionOnDeck(newPosXOnly.x, newPosXOnly.y)) {\r\n                            // X-only movement is valid\r\n                            this.player.position.x = newPosXOnly.x;\r\n                            Matter.Body.setPosition(this.player.body, {\r\n                                x: newPosXOnly.x,\r\n                                y: this.player.position.y\r\n                            });\r\n                        }\r\n                        \r\n                        // Then try Y movement only\r\n                        const newPosYOnly = {\r\n                            x: this.player.position.x,\r\n                            y: this.player.position.y + moveY\r\n                        };\r\n                        \r\n    if (this.ship.isPositionOnDeck(newPosYOnly.x, newPosYOnly.y)) {\r\n        // Y-only movement is valid\r\n        this.player.position.y = newPosYOnly.y;\r\n        Matter.Body.setPosition(this.player.body, {\r\n            x: this.player.position.x,\r\n            y: newPosYOnly.y\r\n        });\r\n    }\r\n}\r\n                    \r\n                    // When walking on deck, player should not be a sensor\r\n                    if (this.player.body.isSensor) {\r\n                        Matter.Body.set(this.player.body, 'isSensor', false);\r\n                    }\r\n                }\r\n                \r\n                // When player is on deck, we only need to handle their relative movement\r\n                // The absolute position coupling is handled in the update method\r\n                \r\n                // Apply ship velocity to player to maintain same world velocity\r\n                Matter.Body.setVelocity(this.player.body, {\r\n                    x: this.ship.body.velocity.x,\r\n                    y: this.ship.body.velocity.y\r\n                });\r\n            }\r\n        } else {\r\n            // Player is moving independently (not on ship)\r\n            // Calculate angle between player and mouse\r\n            const dx = this.mousePosition.x - this.player.position.x;\r\n            const dy = this.mousePosition.y - this.player.position.y;\r\n            const angle = Math.atan2(dy, dx);\r\n            \r\n            // Movement vectors\r\n            let moveX = 0;\r\n            let moveY = 0;\r\n            \r\n            // W = forward toward mouse\r\n            if (this.keysPressed.has('w')) {\r\n                moveX += Math.cos(angle) * moveSpeed;\r\n                moveY += Math.sin(angle) * moveSpeed;\r\n            }\r\n            \r\n            // S = backward away from mouse\r\n            if (this.keysPressed.has('s')) {\r\n                moveX -= Math.cos(angle) * moveSpeed;\r\n                moveY -= Math.sin(angle) * moveSpeed;\r\n            }\r\n            \r\n            // A = strafe left (perpendicular to mouse direction)\r\n            if (this.keysPressed.has('a')) {\r\n                moveX += Math.cos(angle - Math.PI/2) * moveSpeed;\r\n                moveY += Math.sin(angle - Math.PI/2) * moveSpeed;\r\n            }\r\n            \r\n            // D = strafe right (perpendicular to mouse direction)\r\n            if (this.keysPressed.has('d')) {\r\n                moveX += Math.cos(angle + Math.PI/2) * moveSpeed;\r\n                moveY += Math.sin(angle + Math.PI/2) * moveSpeed;\r\n            }\r\n            \r\n            // Apply movement\r\n            this.player.position.x += moveX;\r\n            this.player.position.y += moveY;\r\n            \r\n            // Update player physics body using Matter import\r\n            Matter.Body.setPosition(this.player.body, {\r\n                x: this.player.position.x,\r\n                y: this.player.position.y\r\n            });\r\n            \r\n            // Ensure player body is not a sensor when off the ship\r\n            if (this.player.body.isSensor) {\r\n                Matter.Body.set(this.player.body, 'isSensor', false);\r\n            }\r\n        }\r\n        \r\n        // Spacebar to fire cannons when on ship (regardless of whether at wheel or not)\r\n        if (this.playerOnShip && this.keysPressed.has(' ')) {\r\n            this.ship.fireCannon();\r\n            // Remove space from pressed keys to prevent continuous firing\r\n            this.keysPressed.delete(' ');\r\n        }\r\n    }\r\n    \r\n    // Update camera position to follow player\r\n    private updateCamera(): void {\r\n        // Position camera directly on player to keep them centered in the viewport\r\n        // No adjustment needed for width/height anymore since we handle that in the rendering\r\n        this.viewport.x = this.player.position.x;\r\n        this.viewport.y = this.player.position.y;\r\n    }\r\n    \r\n    // Render game entities using Canvas\r\n    private render2D(): void {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        \r\n        // Transform context to apply camera and scaling\r\n        this.ctx.save();\r\n        \r\n        // Draw water background first (before translation) to ensure it covers the entire visible area\r\n        this.ctx.fillStyle = '#87CEEB'; // Sky blue water color\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        \r\n        // Apply scaling from the center of the viewport\r\n        const centerX = this.viewport.width / 2;\r\n        const centerY = this.viewport.height / 2;\r\n        \r\n        // Properly center the camera on the player:\r\n        // 1. Move to canvas center\r\n        // 2. Apply scaling\r\n        // 3. Move viewport so player is always centered\r\n        this.ctx.translate(centerX, centerY);\r\n        this.ctx.scale(this.viewport.scale, this.viewport.scale);\r\n        this.ctx.translate(\r\n            -this.viewport.x,\r\n            -this.viewport.y\r\n        );\r\n        \r\n        // Draw additional water for areas we're looking at in the game world, accounting for zoom\r\n        this.ctx.fillStyle = '#87CEEB'; // Sky blue water color\r\n        const visibleWidth = this.viewport.width / this.viewport.scale;\r\n        const visibleHeight = this.viewport.height / this.viewport.scale;\r\n        this.ctx.fillRect(\r\n            this.viewport.x - visibleWidth, \r\n            this.viewport.y - visibleHeight, \r\n            visibleWidth * 3, \r\n            visibleHeight * 3\r\n        );\r\n        \r\n        // Draw grid lines for better movement reference\r\n        this.drawGrid();\r\n        \r\n        // Draw ship using the brigantine shape\r\n        this.ship.draw(this.ctx);\r\n        \r\n        // Draw player exactly at their world position\r\n        this.ctx.fillStyle = '#ffcc00'; // Yellow player color\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.player.position.x, this.player.position.y, 15, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Draw player direction indicator (pointing toward mouse)\r\n        if (!this.playerOnShip) {\r\n            const dx = this.mousePosition.x - this.player.position.x;\r\n            const dy = this.mousePosition.y - this.player.position.y;\r\n            const angle = Math.atan2(dy, dx);\r\n            \r\n            this.ctx.strokeStyle = '#ffffff';\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.player.position.x, this.player.position.y);\r\n            this.ctx.lineTo(\r\n                this.player.position.x + Math.cos(angle) * 20,\r\n                this.player.position.y + Math.sin(angle) * 20\r\n            );\r\n            this.ctx.stroke();\r\n        }\r\n        \r\n        // Draw enemies\r\n        this.ctx.fillStyle = '#ff3300'; // Red enemy color\r\n        for (const enemy of this.enemies) {\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(enemy.position.x, enemy.position.y, 15, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        // Draw additional game elements like islands, etc.\r\n        \r\n        // Draw debug collision shapes if debug mode is enabled\r\n        if (this.debugMode) {\r\n            this.drawDebugShapes();\r\n            \r\n            // Also show the walkable area when debug mode is enabled\r\n            this.ship.testWalkableArea(this.ctx, 15); // Use 15px grid size for better performance\r\n        }\r\n        \r\n        // Draw walkable area test grid if enabled separately with G key\r\n        if (this.showWalkableTest && !this.debugMode) {\r\n            this.ship.testWalkableArea(this.ctx, 20); // Use 20px grid size\r\n        }\r\n        \r\n        this.ctx.restore();\r\n        \r\n        // Draw HUD elements\r\n        this.drawHUD();\r\n        \r\n        // Draw cannonballs\r\n        this.drawCannonballs();\r\n    }\r\n    \r\n    // Draw Heads-Up Display elements\r\n    private drawHUD(): void {\r\n        // Player health\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.fillRect(20, 20, 200, 20);\r\n        \r\n        this.ctx.fillStyle = '#00cc00';\r\n        this.ctx.fillRect(20, 20, this.player.health * 2, 20);\r\n        \r\n        this.ctx.strokeStyle = '#fff';\r\n        this.ctx.strokeRect(20, 20, 200, 20);\r\n        \r\n        // Ship water level if player is on ship\r\n        if (this.playerOnShip) {\r\n            this.ctx.fillStyle = '#333';\r\n            this.ctx.fillRect(20, 50, 200, 20);\r\n            \r\n            this.ctx.fillStyle = '#33ccff';\r\n            this.ctx.fillRect(20, 50, this.ship.waterLevel * 2, 20);\r\n                 this.ctx.strokeStyle = '#fff';\r\n        this.ctx.strokeRect(20, 50, 200, 20);\r\n        }\r\n        \r\n        // Player coordinates tracker\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'; // Semi-transparent background\r\n        this.ctx.fillRect(20, this.playerOnShip ? 80 : 50, 200, 30);\r\n        \r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = '12px Arial';\r\n        \r\n        // Round the coordinates to integers for cleaner display\r\n        const playerX = Math.round(this.player.position.x);\r\n        const playerY = Math.round(this.player.position.y);\r\n        \r\n        // Add status text for player on ship\r\n        let statusText = '';\r\n        if (this.playerOnShip) {\r\n            statusText = this.player.atShipWheel ? ' (At Wheel)' : ' (On Deck)';\r\n        }\r\n        \r\n        this.ctx.fillText(`Coordinates: X: ${playerX} Y: ${playerY}${statusText}`, 30, this.playerOnShip ? 100 : 70);\r\n        \r\n        // Show deck position status if in debug mode\r\n        if (this.debugMode && this.playerOnShip) {\r\n            const onDeck = this.ship.isPositionOnDeck(\r\n                this.player.position.x, \r\n                this.player.position.y\r\n            );\r\n            this.ctx.fillStyle = onDeck ? '#80ff80' : '#ff8080'; // Green if on deck, red if not\r\n            this.ctx.fillText(`On Deck: ${onDeck ? 'YES' : 'NO'}`, \r\n                150, \r\n                this.playerOnShip ? 100 : 70\r\n            );\r\n            this.ctx.fillStyle = '#ffffff'; // Reset fill style\r\n        }\r\n        \r\n        this.ctx.strokeStyle = '#fff';\r\n        this.ctx.strokeRect(20, this.playerOnShip ? 80 : 50, 200, 30);\r\n        \r\n        // Zoom level indicator\r\n        const zoomYPos = this.playerOnShip ? 120 : 90;\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'; // Semi-transparent background\r\n        this.ctx.fillRect(20, zoomYPos, 200, 30);\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.fillText(`Zoom: ${this.viewport.scale.toFixed(2)}x`, 30, zoomYPos + 20);\r\n        this.ctx.strokeStyle = '#fff';\r\n        this.ctx.strokeRect(20, zoomYPos, 200, 30);\r\n        \r\n        // Sail openness and angle indicator (when on ship)\r\n        if (this.playerOnShip) {\r\n            const sailYPos = zoomYPos + 40;\r\n            \r\n            // Calculate average sail openness and angles\r\n            let totalOpenness = 0;\r\n            let totalAngle = 0;\r\n            let sailCount = 0;\r\n              this.ship.modules.forEach(module => {\r\n                if (module.type === 'sail') {\r\n                    if (module instanceof SailModule) {\r\n                        // If it's a SailModule, use its properties directly\r\n                        totalOpenness += module.openness;\r\n                        totalAngle += module.angle;\r\n                    } else {\r\n                        // For legacy ShipModule, use type assertion\r\n                        const sailModule = module as ShipModule;\r\n                        totalOpenness += (sailModule.openness !== undefined ? sailModule.openness : 0);\r\n                        totalAngle += (sailModule.angle !== undefined ? sailModule.angle : 0);\r\n                    }\r\n                    sailCount++;\r\n                }\r\n            });\r\n            \r\n            const avgSailOpenness = sailCount > 0 ? Math.round(totalOpenness / sailCount) : 0;\r\n            const avgSailAngle = sailCount > 0 ? Math.round(totalAngle / sailCount) : 0;\r\n            \r\n            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\r\n            this.ctx.fillRect(20, sailYPos, 200, 80); // Increased height to show all sail info\r\n            \r\n            // Background bar for average sail openness\r\n            this.ctx.fillStyle = '#333';\r\n            this.ctx.fillRect(30, sailYPos + 15, 180, 10);\r\n            \r\n            // Fill bar based on average sail openness\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.fillRect(30, sailYPos + 15, avgSailOpenness * 1.8, 10);\r\n            \r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.fillText(`Sails: ${avgSailOpenness}% open (W/S to adjust)`, 30, sailYPos + 12);\r\n            \r\n            // Show sail angle\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.fillText(`Sail angle: ${avgSailAngle}° (Shift+A/D to rotate)`, 30, sailYPos + 35);\r\n            \r\n            // Show rudder angle\r\n            this.ctx.fillText(`Rudder: ${Math.round(this.ship.rudderAngle)}° (A/D to steer)`, 30, sailYPos + 55);\r\n            \r\n            // Show individual sail status\r\n            const sailModules = Array.from(this.ship.modules.values()).filter(m => m.type === 'sail');\r\n            \r\n            if (sailModules.length > 0) {\r\n                // Calculate sail efficiency based on the ship's current state\r\n                const sailEfficiency = this.ship.calculateSailEfficiency();\r\n                \r\n                // Color-code based on efficiency\r\n                if (sailEfficiency === 0) {\r\n                    this.ctx.fillStyle = '#ff5555'; // Bright red for no wind capture\r\n                    this.ctx.fillText(`Wind power: 0% (Bad sail angle)`, 30, sailYPos + 75);\r\n                } else {\r\n                    if (sailEfficiency > 0.7) {\r\n                        this.ctx.fillStyle = '#80ff80'; // Bright green for excellent efficiency\r\n                    } else if (sailEfficiency > 0.4) {\r\n                        this.ctx.fillStyle = '#ccff00'; // Yellow-green for good efficiency\r\n                    } else if (sailEfficiency > 0.2) {\r\n                        this.ctx.fillStyle = '#ffcc00'; // Yellow for moderate efficiency\r\n                    } else {\r\n                        this.ctx.fillStyle = '#ff8080'; // Red for poor efficiency\r\n                    }\r\n                    \r\n                    this.ctx.fillText(`Wind power: ${Math.round(sailEfficiency * 100)}%`, 30, sailYPos + 75);\r\n                }\r\n                \r\n                // No need for direction information here since it's shown below\r\n            }\r\n            \r\n            // Additional hint text about sail function if sails are closed\r\n            if (avgSailOpenness === 0) {\r\n                this.ctx.fillStyle = '#ffcc00'; // Yellow warning\r\n                this.ctx.fillText('(Ship won\\'t move with closed sails)', 30, sailYPos + 75);\r\n            }\r\n            \r\n            // Calculate turning power based on new mechanics (inverse to ship's momentum)\r\n            // Higher momentum = lower turning power\r\n            const turnEffectiveness = Math.max(30, 100 - (this.ship.momentum * 70));\r\n            \r\n            // Show rudder effectiveness and ship movement direction info (combined)\r\n            this.ctx.fillStyle = turnEffectiveness > 60 ? '#80ff80' : (turnEffectiveness > 40 ? '#ffcc00' : '#ff8080');\r\n            this.ctx.fillText(\r\n                `Turning power: ${Math.floor(turnEffectiveness)}% | Ship always moves forward when sails are open`, \r\n                30, \r\n                sailYPos + 95\r\n            );\r\n            \r\n            this.ctx.strokeStyle = '#fff';\r\n            this.ctx.strokeRect(20, sailYPos, 200, 100); // Extended height for new info\r\n        }\r\n        \r\n        // Enhanced Wind direction indicator\r\n        const windDirection = this.world.getWindDirection();\r\n        const windPower = this.world.getWindPower();\r\n        \r\n        // Create a background for the wind indicator\r\n        this.ctx.save();\r\n        this.ctx.translate(this.canvas.width - 80, 80); // Moved slightly to give more room\r\n        \r\n        // Draw a circular background\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(0, 0, 40, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        \r\n        // Add a \"Wind From\" label above the compass\r\n        this.ctx.font = '10px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.fillText('Wind From', 0, -50);\r\n        \r\n        // Draw a compass-like structure around the edge\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(0, 0, 35, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        \r\n        // Add N, E, S, W indicators\r\n        this.ctx.font = '12px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.fillText('N', 0, -30);\r\n        this.ctx.fillText('E', 30, 0);\r\n        this.ctx.fillText('S', 0, 30);\r\n        this.ctx.fillText('W', -30, 0);\r\n        \r\n        // Draw the wind arrow to properly show where the wind is coming FROM\r\n        // This matches meteorological convention and aligns with the physics\r\n        this.ctx.rotate(windDirection); // Rotate to point in the direction the wind is coming FROM\r\n        \r\n        // Wind power affects arrow size\r\n        const arrowSize = 20 + 10 * windPower;\r\n        \r\n        // Create a blue gradient for the wind arrow\r\n        const gradient = this.ctx.createLinearGradient(0, arrowSize, 0, -arrowSize);\r\n        gradient.addColorStop(0, '#00ccff'); // Light blue at arrow head\r\n        gradient.addColorStop(1, '#0066cc'); // Darker blue at arrow tail\r\n        \r\n        // Draw wind arrow with gradient\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.strokeStyle = gradient;\r\n        this.ctx.fillStyle = gradient;\r\n        \r\n        // Draw the arrow body\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(0, arrowSize);\r\n        this.ctx.lineTo(0, -arrowSize);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw arrowhead at the top (pointing FROM where the wind comes)\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(0, -arrowSize);\r\n        this.ctx.lineTo(-8, -arrowSize + 10);\r\n        this.ctx.lineTo(8, -arrowSize + 10);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        \r\n        // Add wind speed text\r\n        this.ctx.save();\r\n        // Since we rotated by windDirection earlier,\r\n        // we need to rotate back by the same amount to make text upright\r\n        this.ctx.rotate(-windDirection);\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'middle';\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = '10px Arial';\r\n        \r\n        // Convert wind power to a more readable format (0-10 scale)\r\n        const windSpeedDisplay = Math.round(windPower * 10);\r\n        this.ctx.fillText(`${windSpeedDisplay}/10`, 0, 0);\r\n        \r\n        this.ctx.restore();\r\n        this.ctx.restore();\r\n        \r\n        // Display debug mode indicator if active\r\n        if (this.debugMode) {\r\n            const debugYPos = this.canvas.height - 80;\r\n            this.ctx.fillStyle = 'rgba(255, 0, 0, 0.7)';\r\n            this.ctx.fillRect(20, debugYPos, 160, 30);\r\n            this.ctx.fillStyle = '#ffffff';\r\n            this.ctx.font = '12px Arial';\r\n            this.ctx.fillText('DEBUG MODE: Press L to toggle', 30, debugYPos + 20);\r\n        }\r\n        \r\n        // Display controls\r\n        const controlsYPos = this.canvas.height - 40;\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\r\n        this.ctx.fillRect(20, controlsYPos, 500, 30); // Made wider to fit more text\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = '12px Arial';\r\n        \r\n        if (this.playerOnShip) {\r\n            if (this.player.atShipWheel) {\r\n                // Controls when at the wheel\r\n                this.ctx.fillText('W/S: Open/Close Sails | A/D: Steer | Shift+A/D: Rotate Sails | E: Leave Wheel | F: Exit Ship | SPACE: Fire Cannons | L: Debug', 30, controlsYPos + 20);\r\n            } else {\r\n                // Controls when walking on deck\r\n                this.ctx.fillText('WASD: Move on Deck | E: Use Wheel (when near) | F: Exit Ship | SPACE: Fire Cannons | L: Debug', 30, controlsYPos + 20);\r\n            }\r\n        } else {\r\n            this.ctx.fillText('WASD: Move (Relative to Mouse) | F: Board Ship | L: Toggle Debug Mode', 30, controlsYPos + 20);\r\n        }\r\n    }\r\n\r\n    // Draw grid lines for better movement reference\r\n    private drawGrid(): void {\r\n        const gridSize = 100; // Size of each grid cell\r\n        const gridColor = 'rgba(255, 255, 255, 0.2)'; // Semi-transparent white\r\n        \r\n        // Calculate grid boundaries to ensure coverage of the entire visible area accounting for zoom\r\n        // Add extra padding to ensure grid covers the entire screen even after translation\r\n        const visibleWidth = this.viewport.width / this.viewport.scale;\r\n        const visibleHeight = this.viewport.height / this.viewport.scale;\r\n        \r\n        const startX = Math.floor((this.viewport.x - visibleWidth) / gridSize) * gridSize;\r\n        const startY = Math.floor((this.viewport.y - visibleHeight) / gridSize) * gridSize;\r\n        const endX = startX + visibleWidth * 4; // Increased coverage for wider screens\r\n        const endY = startY + visibleHeight * 4; // Increased coverage for taller screens\r\n        \r\n        this.ctx.strokeStyle = gridColor;\r\n        this.ctx.lineWidth = 1;\r\n        \r\n        // Draw vertical lines\r\n        for (let x = startX; x <= endX; x += gridSize) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x, startY);\r\n            this.ctx.lineTo(x, endY);\r\n            this.ctx.stroke();\r\n            \r\n            // Add coordinate labels at major grid lines (every 500 units)\r\n            if (x % 500 === 0) {\r\n                this.ctx.fillStyle = gridColor;\r\n                this.ctx.font = '10px Arial';\r\n                this.ctx.textAlign = 'center';\r\n                this.ctx.fillText(x.toString(), x, startY + 15);\r\n            }\r\n        }\r\n        \r\n        // Draw a highlighted grid line at origin (0,0)\r\n        if (0 >= startX && 0 <= endX) {\r\n            this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)'; // Brighter line for origin\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(0, startY);\r\n            this.ctx.lineTo(0, endY);\r\n            this.ctx.stroke();\r\n            this.ctx.strokeStyle = gridColor;\r\n            this.ctx.lineWidth = 1;\r\n        }\r\n        \r\n        // Draw horizontal lines\r\n        for (let y = startY; y <= endY; y += gridSize) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(startX, y);\r\n            this.ctx.lineTo(endX, y);\r\n            this.ctx.stroke();\r\n            \r\n    // Add coordinate labels at major grid lines (every 500 units)\r\n    if (y % 500 === 0) {\r\n        this.ctx.fillStyle = gridColor;\r\n        this.ctx.font = '10px Arial';\r\n        this.ctx.textAlign = 'left';\r\n        this.ctx.fillText(y.toString(), startX + 5, y + 15);\r\n    }\r\n}\r\n        \r\n        // Draw a highlighted grid line at origin (0,0)\r\n        if (0 >= startY && 0 <= endY) {\r\n            this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)'; // Brighter line for origin\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(startX, 0);\r\n            this.ctx.lineTo(endX, 0);\r\n            this.ctx.stroke();\r\n            this.ctx.strokeStyle = gridColor;\r\n            this.ctx.lineWidth = 1;\r\n        }\r\n    }\r\n\r\n    // Draw collision shapes and boundaries for debugging\r\n    private drawDebugShapes(): void {\r\n        // Set styles for debug shapes\r\n        this.ctx.lineWidth = 2;\r\n        \r\n        // Draw player physics body outline\r\n        this.ctx.strokeStyle = 'rgba(0, 255, 0, 0.7)'; // Green for player collision body\r\n        this.drawPhysicsBody(this.player.body);\r\n        \r\n        // Draw enemy physics bodies\r\n        this.ctx.strokeStyle = 'rgba(255, 165, 0, 0.7)'; // Orange for enemy collision bodies\r\n        for (const enemy of this.enemies) {\r\n            this.drawPhysicsBody(enemy.body);\r\n        }\r\n        \r\n        // Draw ship deck area with a semi-transparent overlay\r\n        this.drawShipDeckArea();\r\n        \r\n        // Draw the wheel interaction zone\r\n        this.drawWheelInteractionZone();\r\n        \r\n        // Draw debug text info\r\n        this.drawDebugInfo();\r\n    }\r\n    \r\n    // Helper method to draw a Matter.js physics body\r\n    private drawPhysicsBody(body: Matter.Body): void {\r\n        const vertices = body.vertices;\r\n        \r\n        if (!vertices || vertices.length === 0) return;\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(vertices[0].x, vertices[0].y);\r\n        \r\n        for (let i = 1; i < vertices.length; i++) {\r\n            this.ctx.lineTo(vertices[i].x, vertices[i].y);\r\n        }\r\n        \r\n        // Close the shape\r\n        this.ctx.lineTo(vertices[0].x, vertices[0].y);\r\n        this.ctx.stroke();\r\n        \r\n        // Draw center of mass\r\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(body.position.x, body.position.y, 4, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n    }\r\n    \r\n    // Draw the ship's deck area for debugging\r\n    private drawShipDeckArea(): void {\r\n        // Save context state\r\n        this.ctx.save();\r\n        \r\n        // Translate and rotate to ship's position and orientation\r\n        this.ctx.translate(this.ship.position.x, this.ship.position.y);\r\n        this.ctx.rotate(this.ship.body.angle);\r\n        \r\n        // Draw hull outline\r\n        if (!this.ship.path) {\r\n            // Make sure path exists\r\n            this.ship.path = Ship.createHullPath();\r\n        }\r\n        \r\n        // Draw a semi-transparent overlay for the ship hull\r\n        this.ctx.fillStyle = 'rgba(0, 100, 255, 0.1)';\r\n        this.ctx.fill(this.ship.path);\r\n        \r\n        // Draw hull outline\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.stroke(this.ship.path);\r\n        \r\n        this.ctx.restore();\r\n    }\r\n    \r\n    // Draw the wheel interaction zone and ship obstacles\r\n    private drawWheelInteractionZone(): void {\r\n        this.ctx.save();\r\n        this.ctx.translate(this.ship.position.x, this.ship.position.y);\r\n        this.ctx.rotate(this.ship.body.angle);\r\n        \r\n        // Draw all the ship obstacles (masts, wheel) from Ship.ts using correct positions\r\n        const obstacles = [\r\n            { x: 165, y: 0, name: \"Front Mast\" },  // Front mast - matches Ship.MASTS[0]\r\n            { x: -35, y: 0, name: \"Middle Mast\" }, // Middle mast - matches Ship.MASTS[1]\r\n            { x: -235, y: 0, name: \"Back Mast\" },  // Back mast - matches Ship.MASTS[2]\r\n            { x: -90, y: 0, name: \"Wheel\" }        // Steering wheel - matches Ship.WHEEL\r\n        ];\r\n        \r\n        // Draw obstacle avoid radius for all obstacles\r\n        const insetWidth = this.ship.size.width / 2 * 0.95;\r\n        const avoidRadius = 0.15 * insetWidth; // 15% of ship width as in Ship.ts\r\n        \r\n        for (const obstacle of obstacles) {\r\n            // Draw obstacle position and avoid radius\r\n            if (obstacle.name === \"Wheel\") {\r\n                this.ctx.fillStyle = 'rgba(255, 255, 0, 0.2)'; // Yellow for wheel\r\n                this.ctx.strokeStyle = 'rgba(255, 255, 0, 0.7)';\r\n            } else {\r\n                this.ctx.fillStyle = 'rgba(139, 69, 19, 0.2)'; // Brown for masts\r\n                this.ctx.strokeStyle = 'rgba(139, 69, 19, 0.7)';\r\n            }\r\n            \r\n            // Draw obstacle area\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(obstacle.x, obstacle.y, avoidRadius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            this.ctx.stroke();\r\n            \r\n            // Draw special interaction zone for wheel\r\n            if (obstacle.name === \"Wheel\") {\r\n                // Draw the wheel interaction radius (larger than avoid radius)\r\n                this.ctx.strokeStyle = 'rgba(255, 255, 0, 0.7)';\r\n                this.ctx.setLineDash([5, 5]); // Dashed line for interaction zone\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(obstacle.x, obstacle.y, 50, 0, Math.PI * 2);\r\n                this.ctx.stroke();\r\n                this.ctx.setLineDash([]); // Reset line style\r\n                \r\n                // Label the wheel (just add the label without redundant circle)\r\n                this.ctx.font = '12px Arial';\r\n                this.ctx.fillStyle = 'white';\r\n                this.ctx.fillText(\"Wheel\", obstacle.x - 15, obstacle.y - 20);\r\n            }\r\n        }\r\n        \r\n        this.ctx.restore();\r\n    }\r\n\r\n    // Draw velocity vectors for entities\r\n    /*\r\n    private drawVelocityVectors(): void {\r\n        // Draw ship velocity vector\r\n        this.ctx.strokeStyle = 'rgba(255, 255, 0, 0.7)'; // Yellow for velocity\r\n        this.drawVelocityVector(this.ship.body);\r\n        \r\n        // Draw player velocity vector\r\n        this.ctx.strokeStyle = 'rgba(0, 255, 255, 0.7)'; // Cyan for player velocity\r\n        this.drawVelocityVector(this.player.body);\r\n    }\r\n    \r\n    // Draw a velocity vector for a physics body\r\n    private drawVelocityVector(body: Matter.Body): void {\r\n        const velocityScale = 10; // Scale velocity for better visualization\r\n        const velocityX = body.velocity.x * velocityScale;\r\n        const velocityY = body.velocity.y * velocityScale;\r\n        \r\n        // Only draw if there is some velocity\r\n        if (Math.abs(velocityX) > 0.1 || Math.abs(velocityY) > 0.1) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(body.position.x, body.position.y);\r\n            this.ctx.lineTo(\r\n                body.position.x + velocityX,\r\n                body.position.y + velocityY\r\n            );\r\n            this.ctx.stroke();\r\n            \r\n            // Draw arrowhead\r\n            const angle = Math.atan2(velocityY, velocityX);\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(\r\n                body.position.x + velocityX,\r\n                body.position.y + velocityY\r\n            );\r\n            this.ctx.lineTo(\r\n                body.position.x + velocityX - 10 * Math.cos(angle - Math.PI/6),\r\n                body.position.y + velocityY - 10 * Math.sin(angle - Math.PI/6)\r\n            );\r\n            this.ctx.moveTo(\r\n                body.position.x + velocityX,\r\n                body.position.y + velocityY\r\n            );\r\n            this.ctx.lineTo(\r\n                body.position.x + velocityX - 10 * Math.cos(angle + Math.PI/6),\r\n                body.position.y + velocityY - 10 * Math.sin(angle + Math.PI/6)\r\n            );\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    */\r\n    \r\n    // Draw debug info as text\r\n    private drawDebugInfo(): void {\r\n        // Minimal implementation to avoid errors\r\n        // Save current transform to draw in screen space\r\n        this.ctx.save();\r\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset to identity matrix\r\n        \r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.fillRect(10, 10, 300, 60);\r\n        this.ctx.fillStyle = '#ffffff';\r\n        this.ctx.font = '12px monospace';\r\n        \r\n        // Basic info\r\n        this.ctx.fillText(`Ship Position: ${Math.round(this.ship.position.x)}, ${Math.round(this.ship.position.y)}`, 20, 30);\r\n        \r\n        // Calculate actual wheel position with rotation\r\n        const wheelCoords = this.shipToWorldCoordinates(-90, 0);\r\n        this.ctx.fillText(`Wheel Position: ${Math.round(wheelCoords.x)}, ${Math.round(wheelCoords.y)}`, 20, 50);\r\n        \r\n        this.ctx.restore();\r\n    }    // Update cannon turret angles based on mouse position\r\n    private updateCannonAiming(): void {\r\n        if (!this.playerOnShip) return;\r\n        \r\n        // Get all cannon modules\r\n        const cannons = Array.from(this.ship.modules.values()).filter(module => module.type === 'cannon');\r\n        \r\n        // Calculate local mouse position relative to ship\r\n        const localMousePos = this.worldToShipCoordinates(\r\n            this.mousePosition.x,\r\n            this.mousePosition.y\r\n        );        // Update each cannon's turret angle to point toward mouse position\r\n        cannons.forEach(cannon => {\r\n            // Calculate angle from cannon to mouse\r\n            const dx = localMousePos.x - cannon.position.x;\r\n            const dy = localMousePos.y - cannon.position.y;\r\n            \r\n            // Get base angle from cannon to mouse\r\n            let angle = Math.atan2(dy, dx) - Math.PI/2; // Subtract 90 degrees to fix rotation offset\r\n            \r\n            // Normalize angle relative to the cannon's base rotation\r\n            // This makes our limit calculations work correctly regardless of cannon orientation\r\n            let relativeAngle = angle - cannon.rotation;\r\n            \r\n            // Normalize the relative angle to be within -PI to PI for easier limit calculations\r\n            while (relativeAngle > Math.PI) relativeAngle -= Math.PI * 2;\r\n            while (relativeAngle < -Math.PI) relativeAngle += Math.PI * 2;\r\n            \r\n            // lateral angle limits - ensure cannons only point outward from the ship\r\n            const cannonAngleLimit = Math.PI / 4; // 45 degrees limit\r\n            \r\n            // If the relative angle would point toward the ship, adjust it to point outward\r\n            if (relativeAngle < -cannonAngleLimit || relativeAngle > cannonAngleLimit) {\r\n                // If pointing inward, adjust to nearest allowed angle (preserving direction)\r\n                if (relativeAngle >= 0) {\r\n                    relativeAngle = cannonAngleLimit;\r\n                } else {\r\n                    relativeAngle = -cannonAngleLimit;\r\n                }\r\n            }\r\n              // Convert back to the absolute angle by adding the cannon's base rotation\r\n            angle = relativeAngle + Math.PI;\r\n            \r\n            // Set final turret angle\r\n            if (cannon instanceof CannonModule) {\r\n                // Use typed module's property\r\n                cannon.turretAngle = angle;\r\n            } else {\r\n                // For legacy modules, use type assertion\r\n                const cannonModule = cannon as ShipModule;\r\n                cannonModule.turretAngle = angle;\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Add a cannonball to the game\r\n    addCannonball(x: number, y: number, angle: number, speed: number = 10): void {\r\n        const cannonball = new Cannonball(x, y, angle, speed);\r\n        this.cannonballs.push(cannonball);\r\n        \r\n        // Add cannonball physics body to the world\r\n        World.add(this.engine.world, cannonball.body);\r\n    }\r\n    \r\n    // Update and manage cannonballs\r\n    private updateCannonballs(): void {\r\n        // Update each cannonball and remove dead ones\r\n        for (let i = this.cannonballs.length - 1; i >= 0; i--) {\r\n            const cannonball = this.cannonballs[i];\r\n            \r\n            // Update cannonball and check if it's still alive\r\n            const isAlive = cannonball.update();\r\n            \r\n            if (!isAlive) {\r\n                // Remove cannonball from physics world\r\n                World.remove(this.engine.world, cannonball.body);\r\n                \r\n                // Remove from our array\r\n                this.cannonballs.splice(i, 1);\r\n            }\r\n        }\r\n        \r\n        // Check for collisions with enemies\r\n        // In a full implementation, we would use Matter.js collision events\r\n    }\r\n    \r\n    // Draw all cannonballs\r\n    private drawCannonballs(): void {\r\n        for (const cannonball of this.cannonballs) {\r\n            cannonball.draw(this.ctx);\r\n        }\r\n    }\r\n    \r\n    private gameLoop(): void {\r\n        // Update game state and render each frame\r\n        requestAnimationFrame(() => {\r\n            this.update();\r\n            this.render2D();\r\n            this.gameLoop();\r\n        });\r\n    }\r\n\r\n    private update(): void {\r\n        \r\n        // Update world physics\r\n        this.world.update();\r\n        \r\n        // Store player's position relative to ship if they're on the ship\r\n        // We do this BEFORE updating the ship so we can maintain relative position\r\n        let localPlayerPos = { x: 0, y: 0 };\r\n        let wasOnDeck = false;\r\n        let wasAtWheel = false;\r\n        \r\n        if (this.playerOnShip) {\r\n            if (this.player.atShipWheel) {\r\n                // If at wheel, store the fixed wheel position in ship coordinates\r\n                // The wheel is always at -90,0 in ship's coordinate system (from Ship.ts line 71)\r\n                localPlayerPos.x = -90;\r\n                localPlayerPos.y = 0;\r\n                wasAtWheel = true;\r\n            } else {\r\n                // Store player's position in ship's local coordinate system for deck walking\r\n                const localCoords = this.worldToShipCoordinates(\r\n                    this.player.position.x,\r\n                    this.player.position.y\r\n                );\r\n                localPlayerPos.x = localCoords.x;\r\n                localPlayerPos.y = localCoords.y;\r\n                wasOnDeck = true;\r\n            }\r\n        }\r\n        \r\n        // Apply wind forces to the ship\r\n        this.ship.applyWindForce(\r\n            this.world.getWindDirection(),\r\n            this.world.getWindPower()\r\n        );\r\n        \r\n        // Update ship\r\n        this.ship.update();\r\n        \r\n        // Update player position based on their location on the ship\r\n        if (wasOnDeck || wasAtWheel) {\r\n            // Transform back to world coordinates with updated ship position and rotation\r\n            const worldCoords = this.shipToWorldCoordinates(\r\n                localPlayerPos.x,\r\n                localPlayerPos.y\r\n            );\r\n            \r\n            if (wasAtWheel) {\r\n                // If at wheel, just use the transformed position directly\r\n                this.player.position.x = worldCoords.x;\r\n                this.player.position.y = worldCoords.y;\r\n                \r\n                // Update the physics body\r\n                Matter.Body.setPosition(this.player.body, {\r\n                    x: worldCoords.x,\r\n                    y: worldCoords.y\r\n                });\r\n            } \r\n            else if (this.ship.isPositionOnDeck(worldCoords.x, worldCoords.y)) {\r\n                // For deck walking, verify the position is still valid\r\n                // Update player position to stay with ship\r\n                this.player.position.x = worldCoords.x;\r\n                this.player.position.y = worldCoords.y;\r\n                \r\n                // Update the physics body\r\n                Matter.Body.setPosition(this.player.body, {\r\n                    x: worldCoords.x,\r\n                    y: worldCoords.y\r\n                });\r\n            } else {\r\n                // In case the position is no longer on deck (rare edge case),\r\n                // find a safe position on deck using our smart algorithm\r\n                // Start searching near the player's current position\r\n                const safePosition = this.ship.findSafeDismountPosition(\r\n                    this.player.position.x, \r\n                    this.player.position.y\r\n                );\r\n                \r\n                this.player.position.x = safePosition.x;\r\n                this.player.position.y = safePosition.y;\r\n                Matter.Body.setPosition(this.player.body, {\r\n                    x: safePosition.x,\r\n                    y: safePosition.y\r\n                });\r\n            }\r\n            \r\n            // Apply the ship's velocity to the player so they move with the ship\r\n            Matter.Body.setVelocity(this.player.body, {\r\n                x: this.ship.body.velocity.x,\r\n                y: this.ship.body.velocity.y\r\n            });\r\n        }\r\n        \r\n        // Handle player input AFTER maintaining ship-relative position\r\n        this.handlePlayerMovement();\r\n        \r\n        // Update enemies\r\n        for (const enemy of this.enemies) {\r\n            if (Math.random() < 0.01) { // Occasionally move towards player\r\n                enemy.moveTowards(this.player.position.x, this.player.position.y);\r\n            }\r\n        }\r\n        \r\n        // Update camera to follow player\r\n        this.updateCamera();\r\n        \r\n        // Update mouse world position based on the latest camera position\r\n        if (this.screenMousePosition.x !== 0 || this.screenMousePosition.y !== 0) {\r\n            this.mousePosition = this.screenToWorldCoordinates(\r\n                this.screenMousePosition.x,\r\n                this.screenMousePosition.y\r\n            );\r\n        }\r\n        \r\n        // Update cannonballs\r\n        this.updateCannonballs();\r\n    }\r\n}","// This file is the entry point of the game. It initializes the game loop and sets up the Matter.js engine.\n\nimport Matter from 'matter-js';\nimport { Game } from './game/Game';\n\n// Canvas setup\nconst canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n\n// Resize canvas to fill window\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\n// Initialize physics and game with zero gravity for top-down perspective\nconst engine = Matter.Engine.create({ \n    gravity: { x: 0, y: 0, scale: 0 } // No gravity for top-down view\n});\nconst game = new Game(engine);\n\n// Listen for window resize events to adjust canvas\nwindow.addEventListener('resize', () => {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    \n    // Update game viewport dimensions\n    game.updateViewportDimensions(window.innerWidth, window.innerHeight);\n});\n\n// Start the game\ngame.start();"],"names":["root","factory","module","this","modules","installedModules","__webpack_require__","moduleId","exports","name","getter","value","mode","ns","key","object","property","Common","obj","deep","argsStart","deepClone","i","source","prop","keys","values","path","begin","end","val","parts","array","j","temp","choices","min","max","_seededRandom","colorString","message","warning","haystack","needle","list","func","mapped","graph","result","visited","node","neighbors","neighbor","funcs","chain","lastResult","args","l","base","decomp","global","Bounds","vertices","bounds","velocity","vertex","point","boundsA","boundsB","vector","position","deltaX","deltaY","Vector","x","y","angle","output","cos","sin","magnitude","vectorA","vectorB","vectorC","scalar","negate","Vertices","points","body","pathPattern","match","area","centre","cross","average","signed","mass","numerator","denominator","v","n","vertice","dx","dy","nextVertice","scaleX","scaleY","delta","radius","quality","qualityMin","qualityMax","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","theta","vertexA","vertexB","flag","k","z","upper","lower","Events","eventNames","callback","names","callbacks","newCallbacks","event","eventClone","events","Composite","Body","options","composite","isModified","updateParents","updateChildren","childComposite","objects","compositeA","compositeB","constraint","keepStatic","bodies","constraints","composites","id","type","translation","recursive","rotation","Sleeping","Axes","defaults","_initProperties","isNonColliding","defaultFillStyle","defaultStrokeStyle","defaultLineWidth","settings","isStatic","part","moment","density","inertia","autoHull","hull","hullCentre","total","relative","totalArea","totalInertia","deltaTime","timeScale","correction","deltaTimeSquared","frictionAir","velocityPrevX","velocityPrevY","force","offset","properties","timeFactor","motion","minMotion","maxMotion","pairs","pair","collision","bodyA","bodyB","sleepingBody","movingBody","isSleeping","wasSleeping","Constraint","initialPointA","initialPointB","length","render","impulse","fixedA","fixedB","pointA","pointB","pointAWorld","pointBWorld","currentLength","difference","stiffness","massTotal","inertiaTotal","resistanceTotal","torque","share","normal","normalVelocity","relativeVelocity","zero","Pair","Contact","timestamp","parentA","parentB","contacts","supports","activeContacts","support","contactId","contact","isActive","axes","gradient","axis","xx","Bodies","width","height","rectangle","chamfer","slope","roof","x1","x2","x3","verticesPath","trapezoid","maxSides","circle","sides","yy","polygon","vertexSets","flagInternal","removeCollinear","minimumArea","removeDuplicatePoints","canDecomp","isConvex","isConcave","concave","decomposed","chunk","chunkVertices","coincident_max_dist","partA","partB","pav","pbv","da","db","Mouse","element","mouse","touches","scale","pixelRatio","elementBounds","rootNode","scrollX","scrollY","Detector","SAT","broadphasePairs","engine","collisions","pairsTable","pairId","previousCollision","filterA","filterB","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBodyB","verticesB","verticesA","projectionA","projectionB","overlap","projection","dot","nearestDistance","vertexToBody","bodyAPosition","distance","prevIndex","nextIndex","Plugin","plugin","registered","pluginVersion","registeredVersion","dependency","parsed","plugins","dependencies","sortedDependencies","status","tracked","parsedBase","resolved","pattern","range","major","minor","patch","version","r","Render","_requestAnimationFrame","_cancelAnimationFrame","_createCanvas","loop","time","_updateTiming","canvas","_getPixelRatio","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","startTime","world","context","timing","allBodies","allConstraints","background","_applyBackground","sections","section","deltaHistory","elapsedHistory","timestampElapsedHistory","engineDeltaHistory","engineElapsedHistory","lastEngineDelta","deltaMean","_mean","elapsedMean","engineDeltaMean","engineElapsedMean","timestampElapsedMean","rateMean","fps","graphHeight","gap","count","label","indicator","plotY","c","start","coils","showInternalEdges","sprite","texture","_getTexture","normalPosX","normalPosY","grid","bucketKeys","bucketId","region","inspector","selected","item","historySize","devicePixelRatio","backingStorePixelRatio","imagePath","image","cssBackground","Engine","Resolver","Pairs","Grid","gridPairs","engineA","engineB","gravity","gravityScale","worldBounds","activeCount","bodyBtoA","contactShare","positionImpulse","tempA","tempB","tempC","tempD","tangent","contactVertex","normalImpulse","tangentImpulse","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","velocityPointB","tangentVelocity","tangentSpeed","tangentVelocityDirection","normalForce","maxFriction","oAcN","oBcN","contactNormalImpulse","contactTangentImpulse","pairsList","collisionStart","collisionEnd","collisionActive","indexesToRemove","pairIndex","forceUpdate","col","row","buckets","bucket","gridChanged","newRegion","union","isInsideNewRegion","isInsideOldRegion","regionA","regionB","startCol","endCol","startRow","endRow","column","pairKeys","Matter","Composites","deprecated","columns","rows","columnGap","rowGap","stack","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","crossBrace","bodyC","actualRows","lastBodyWidth","xOffset","number","size","newtonsCradle","separation","wheelSize","group","wheelBase","wheelAOffset","wheelBOffset","wheelYOffset","car","wheelA","wheelB","axelA","axelB","particleRadius","particleOptions","constraintOptions","softBody","MouseConstraint","mouseConstraint","mouseEvents","Query","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","ray","outside","overlaps","Runner","_frameTimeout","runner","Svg","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","x0","y0","y1","y2","segs","len","seg","World","Player","__publicField","amount","atWheel","BaseModule","CannonModule","game","worldX","worldY","shipAngle","baseRotation","firingAngle","barrelLength","spawnX","spawnY","SailModule","percent","increment","degrees","windDirection","sailAngleRad","sailNormalAngle","sailNormalX","sailNormalY","windDirX","windDirY","dotProduct","angleDiffDegrees","efficiency","sailOpenness","WheelModule","isControlling","_Ship","_width","_height","speed","fullShipWidth","p","radiusX","radiusY","plankBody","moduleOrData","cannonModule","sailModule","wheelModule","matchingMast","mast","matchingCannon","cannon","sail","wheel","damagedPlankCount","plank","waterIntake","plankIndex","direction","currentSpeed","rudderChangeRate","sailPower","sailCount","avgSailPower","baseTurningPower","turnEffectiveness","sailFactor","totalEfficiency","sailAngle","physicsWindDirection","windSailAngleDiff","angleBonus","targetPosition","cannonConstant","cannonWorldPos","barrelEndX","barrelEndY","windPower","totalSailOpenness","sailsAreOpen","openness","avgSailOpenness","momentumFactor","dragFactor","sailEfficiency","windDirectionX","windDirectionY","shipDirectionX","shipDirectionY","relativeWindAngle","baseEfficiency","alignmentFactor","finalForce","forceVector","openPercent","ctx","localX","localY","cosA","sinA","rotatedX","rotatedY","wx","wy","ww","wh","visualPos","moduleSize","curveAmount","angleDiff","g","b","sailColor","sailGradient","t","controlX","wheelPath","turretAngle","gridSize","shipWidth","shipHeight","halfWidth","halfHeight","testPointSize","insideHull","isWalkable","startX","startY","searchRadius","steps","increments","inc","stepDistance","testLocalX","testLocalY","testWorldX","testWorldY","isAtWheel","isOnBoard","Ship","Enemy","health","aiBehavior","targetX","targetY","normalizedDx","normalizedDy","WorldManager","top","bottom","left","right","elapsedTime","cycleDuration","cyclePosition","northSouthAlignment","minWindPower","entity","Cannonball","other","Game","e","rect","mouseX","mouseY","zoomFactor","newScale","screenX","screenY","playerLocalPos","dirX","dirY","outsideDistance","dismountX","dismountY","boardingX","boardingY","safePosition","wheelX","wheelY","distanceToWheel","enemy","wheelCoords","helmPositionX","helmPositionY","moveX","moveY","newPosX","newPosY","newPosXOnly","newPosYOnly","centerX","centerY","visibleWidth","visibleHeight","playerX","playerY","statusText","onDeck","zoomYPos","sailYPos","totalOpenness","totalAngle","avgSailAngle","m","arrowSize","windSpeedDisplay","debugYPos","controlsYPos","gridColor","endX","endY","obstacles","avoidRadius","obstacle","cannons","localMousePos","relativeAngle","cannonAngleLimit","cannonball","localPlayerPos","wasOnDeck","wasAtWheel","localCoords","worldCoords"],"mappings":"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","x_google_ignoreList":[0]}